{"version":3,"sources":["node_modules/object-assign/index.js","node_modules/react/cjs/react.production.min.js","node_modules/react/index.js","node_modules/scheduler/cjs/scheduler.production.min.js","node_modules/scheduler/index.js","node_modules/react-dom/cjs/react-dom.production.min.js","node_modules/react-dom/index.js","lib/pages/waves-page.tsx","lib/util.ts","vendor/bezier-js/index.js","lib/path.ts","lib/bounding-box.ts","lib/colors.ts","lib/svg-vocabulary.json","lib/pages/vocabulary-page.tsx","lib/browser-main.tsx"],"names":["getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","toObject","val","TypeError","shouldUseNative","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","order2","map","n","join","test3","split","forEach","letter","keys","err","module","exports","target","source","from","symbols","to","s","arguments","length","key","call","l","require","p","Fragment","StrictMode","Profiler","q","r","t","Suspense","u","v","Symbol","for","w","x","iterator","y","a","z","b","c","encodeURIComponent","A","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","B","C","props","context","refs","updater","D","E","isReactComponent","setState","Error","forceUpdate","F","constructor","isPureReactComponent","G","current","H","I","ref","__self","__source","J","e","d","k","h","g","children","f","Array","m","defaultProps","$$typeof","type","_owner","K","L","escape","replace","M","N","toString","O","isArray","push","next","done","value","P","Q","_status","_result","then","default","R","S","T","ReactCurrentDispatcher","ReactCurrentBatchConfig","transition","ReactCurrentOwner","IsSomeRendererActing","Children","apply","count","toArray","only","Component","PureComponent","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createElement","createFactory","bind","createRef","forwardRef","render","isValidElement","lazy","_payload","_init","memo","compare","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","version","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","console","error","defineProperty","Bezier","abs","Math","cos","sin","acos","atan2","sqrt","pow","crt","pi","PI","tau","quart","epsilon","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","ZERO","utils","Tvalues","Cvalues","arcfn","derivativeFn","compute","points","_3d","order","mt","ret","mt2","t2","dCpts","JSON","parse","stringify","splice","computeWithRatios","ratios","f1","f2","f3","f4","derive","dpoints","list","dpt","j","between","approximately","precision","len","sum","ds","de","ts","te","lerp","v1","v2","pointToString","pointsToString","copy","obj","angle","o","dx1","dy1","dx2","dy2","round","pos","indexOf","parseFloat","substring","dist","p1","p2","dx","dy","closest","LUT","point","mdist","mpos","idx","abcratio","bottom","projectionratio","top","lli8","x1","y1","x2","y2","x3","y3","x4","y4","nx","lli4","p3","p4","lli","makeline","findbbox","sections","mx","my","MX","MY","bbox","min","max","mid","size","shapeintersections","s1","bbox1","s2","bbox2","curveIntersectionThreshold","bboxoverlap","intersections","a1","startcap","forward","back","endcap","a2","l1","virtual","l2","iss","intersects","c1","c2","makeshape","bpl","fpl","start","end","shape","getminmax","curve","concat","get","align","line","tx","ty","roots","aligned","reduce","m1","m2","filter","pa","pb","pc","u1","q2","discriminant","mp3","phi","t1","sd","droots","curvature","d1","d2","kOnly","num","dnm","adk","dk","dd","qdsum","pk","nk","inflections","slice","v3","trm","sq","b1","b2","dims","dim","expandbox","_bbox","pairiteration","c1b","c2b","threshold","_t1","_t2","cc1","cc2","pairs","left","right","pair","results","getccenter","_","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","numberSort","PolyBezier","curves","offset","abs$1","cos$1","sin$1","acos$1","sqrt$1","pi$1","coords","args","coordlen","newargs","higher","step","dimlen","_linear","some","_lut","update","getUtils","last","print","coordDigest","_print","computedirection","clockwise","derivative","getABC","steps","verify","lut","getLUT","hits","ft","pim","np","__normal3","__normal2","r1","r2","q1","_p","pt","hull","result","span","mfn","sort","values","extrema","lbbox","tbbox","normal","nv","scale","n1","n2","segment","pass1","pass2","simple","distanceFn","raise","ov","rc","d3","d4","reduced","fcurves","bcurves","alen","tlen","graduated","linearDistanceFunction","slen","reverse","fs","fe","bs","be","ls","le","segments","outline","shapes","lineIntersects","curveintersects","selfintersects","overlaps","errorThreshold","_iterate","np1","circles","t_s","safety","t_e","np2","np3","prev_arc","curr_good","prev_good","t_m","prev_e","interval","_error","abc","selen","lx","ly","bx1","by1","bx2","by2","e1","e2","um","name","layers","tagName","id","fill","fillRule","stroke","strokeWidth","strokeLinecap","strokeLinejoin","specs","nesting","tail","crown","horn","arm","leg"],"mappings":"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","file":"browser-main.71898181.js","sourceRoot":"..","sourcesContent":["/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v17.0.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif(\"function\"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w(\"react.element\");p=w(\"react.portal\");exports.Fragment=w(\"react.fragment\");exports.StrictMode=w(\"react.strict_mode\");exports.Profiler=w(\"react.profiler\");q=w(\"react.provider\");r=w(\"react.context\");t=w(\"react.forward_ref\");exports.Suspense=w(\"react.suspense\");u=w(\"react.memo\");v=w(\"react.lazy\")}var x=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||\"object\"!==typeof a)return null;a=x&&a[x]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}function z(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,\"setState\")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=\"\"===e?\".\"+N(h,0):e,Array.isArray(d)?(c=\"\",null!=a&&(c=a.replace(M,\"$&/\")+\"/\"),O(d,b,c,\"\",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?\"\":(\"\"+d.key).replace(M,\"$&/\")+\"/\")+a)),b.push(d)),1;h=0;e=\"\"===e?\".\":e+\":\";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if(\"object\"===k)throw b=\"\"+a,Error(z(31,\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,\"\",\"\",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version=\"17.0.1\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/** @license React v0.20.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f,g,h,k;if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if(\"undefined\"!==typeof console){var z=\nwindow.cancelAnimationFrame;\"function\"!==typeof window.requestAnimationFrame&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\");\"function\"!==typeof z&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if(\"function\"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","/** @license React v17.0.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),m=require(\"object-assign\"),r=require(\"scheduler\");function y(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+\"Capture\",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||\"undefined\"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E(\"react.element\");ta=E(\"react.portal\");ua=E(\"react.fragment\");wa=E(\"react.strict_mode\");xa=E(\"react.profiler\");ya=E(\"react.provider\");za=E(\"react.context\");Aa=E(\"react.forward_ref\");Ba=E(\"react.suspense\");Ca=E(\"react.suspense_list\");Da=E(\"react.memo\");Ea=E(\"react.lazy\");Fa=E(\"react.block\");E(\"react.scope\");Ga=E(\"react.opaque.id\");Ha=E(\"react.debug_trace_mode\");Ia=E(\"react.offscreen\");Ja=E(\"react.legacy_hidden\")}\nvar Ka=\"function\"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||\"object\"!==typeof a)return null;a=Ka&&a[Ka]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||\"\"}return\"\\n\"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return\"\";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&\"string\"===typeof k.stack){for(var e=k.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return\"\\n\"+e[g].replace(\" at new \",\" at \");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Na(a):\"\"}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na(\"Lazy\");case 13:return Na(\"Suspense\");case 19:return Na(\"SuspenseList\");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return\"\"}}\nfunction Ra(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ua:return\"Fragment\";case ta:return\"Portal\";case xa:return\"Profiler\";case wa:return\"StrictMode\";case Ba:return\"Suspense\";case Ca:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case za:return(a.displayName||\"Context\")+\".Consumer\";case ya:return(a._context.displayName||\"Context\")+\".Provider\";case Aa:var b=a.render;b=b.displayName||b.name||\"\";\nreturn a.displayName||(\"\"!==b?\"ForwardRef(\"+b+\")\":\"ForwardRef\");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"object\":case \"string\":case \"undefined\":return a;default:return\"\"}}function Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,\"checked\",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?bb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction bb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}function db(a){var b=\"\";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}var kb={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};\nfunction lb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function mb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?lb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar nb,ob=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||\"innerHTML\"in a)a.innerHTML=b;else{nb=nb||document.createElement(\"div\");nb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(\"\"+b).trim():b+\"px\"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=sb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!(\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,\"passive\",{get:function(){Pb=!0}});window.addEventListener(\"test\",Qb,Qb);window.removeEventListener(\"test\",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case \"focusin\":case \"focusout\":kc=null;break;case \"dragenter\":case \"dragleave\":lc=null;break;case \"mouseover\":case \"mouseout\":mc=null;break;case \"pointerover\":case \"pointerout\":nc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case \"focusin\":return kc=tc(kc,a,b,c,d,e),!0;case \"dragenter\":return lc=tc(lc,a,b,c,d,e),!0;case \"mouseover\":return mc=tc(mc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var Ec={animationend:Dc(\"Animation\",\"AnimationEnd\"),animationiteration:Dc(\"Animation\",\"AnimationIteration\"),animationstart:Dc(\"Animation\",\"AnimationStart\"),transitionend:Dc(\"Transition\",\"TransitionEnd\")},Fc={},Gc={};\nfa&&(Gc=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),\"TransitionEvent\"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc(\"animationend\"),Jc=Hc(\"animationiteration\"),Kc=Hc(\"animationstart\"),Lc=Hc(\"transitionend\"),Mc=new Map,Nc=new Map,Oc=[\"abort\",\"abort\",Ic,\"animationEnd\",Jc,\"animationIteration\",Kc,\"animationStart\",\"canplay\",\"canPlay\",\"canplaythrough\",\"canPlayThrough\",\"durationchange\",\"durationChange\",\"emptied\",\"emptied\",\"encrypted\",\"encrypted\",\"ended\",\"ended\",\"error\",\"error\",\"gotpointercapture\",\"gotPointerCapture\",\"load\",\"load\",\"loadeddata\",\"loadedData\",\"loadedmetadata\",\"loadedMetadata\",\"loadstart\",\"loadStart\",\n\"lostpointercapture\",\"lostPointerCapture\",\"playing\",\"playing\",\"progress\",\"progress\",\"seeking\",\"seeking\",\"stalled\",\"stalled\",\"suspend\",\"suspend\",\"timeupdate\",\"timeUpdate\",Lc,\"transitionEnd\",\"waiting\",\"waiting\"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e=\"on\"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&\"CompositionEvent\"in window,be=null;fa&&\"documentMode\"in document&&(be=document.documentMode);var ce=fa&&\"TextEvent\"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nvar Pe=fa&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc(\"cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange\".split(\" \"),\n0);Pc(\"drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel\".split(\" \"),1);Pc(Oc,2);for(var Ve=\"change selectionchange textInput compositionstart compositionend compositionupdate\".split(\" \"),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);\nea(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ea(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);ea(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);da(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));da(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));da(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);da(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));\nda(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));da(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var Xe=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),Ye=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+\"__bubble\";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf=\"_reactListening\"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;\"selectionchange\"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if(\"scroll\"!==a)return;e|=2;f=d}var g=$e(f),h=a+\"__\"+(b?\"capture\":\"bubble\");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":x=\"focus\";k=Fd;break;case \"focusout\":x=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var w=0!==(b&4),z=!w&&\"scroll\"===a,u=w?null!==h?h+\"Capture\":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v=\"onMouseLeave\";u=\"onMouseEnter\";t=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)w=Td,v=\"onPointerLeave\",u=\"onPointerEnter\",t=\"pointer\";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+\"leave\",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+\"enter\",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);\"focusout\"===a&&(K=h._wrapperState)&&\nK.controlled&&\"number\"===h.type&&bb(h,\"number\",h.value)}K=d?ue(d):window;switch(a){case \"focusin\":if(me(K)||\"true\"===K.contentEditable)Qe=K,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case \"compositionstart\":var L=\"onCompositionStart\";break b;case \"compositionend\":L=\"onCompositionEnd\";break b;\ncase \"compositionupdate\":L=\"onCompositionUpdate\";break b}L=void 0}else ie?ge(a,c)&&(L=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(L=\"onCompositionStart\");L&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==L?\"onCompositionEnd\"===L&&ie&&(Q=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),0<d.length&&(e=new Ld(\"onBeforeInput\",\n\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case \"button\":case \"input\":case \"select\":case \"textarea\":return!!b.autoFocus}return!1}\nfunction nf(a,b){return\"textarea\"===a||\"option\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of=\"function\"===typeof setTimeout?setTimeout:void 0,pf=\"function\"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent=\"\":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=\"\"))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf=\"__reactFiber$\"+vf,xf=\"__reactProps$\"+vf,ff=\"__reactContainer$\"+vf,yf=\"__reactEvents$\"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||\"Unknown\",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if(\"function\"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h=\"function\"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||\n(b=e.state,\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if(\"string\"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if(\"textarea\"!==a.type)throw Error(y(31,\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=Ug(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||\nnull,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if(\"function\"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k=\"object\"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l=\"object\"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if(\"string\"===typeof f||\"number\"===typeof f)return f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if(\"undefined\"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||\"Component\"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType=\"DELETED\";c.type=\"DELETED\";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||\"head\"!==b&&\"body\"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c(\"r:\"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c(\"r:\"+(tf++).toString(36))},\nvoid 0,null));return b}b=\"r:\"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if(\"function\"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode||\"unstable-defer-without-hiding\"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A=\"function\"===typeof n||\"function\"===typeof g.getSnapshotBeforeUpdate;A||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\n\"function\"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?(\"function\"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===\ntypeof g.componentDidMount&&(b.flags|=4)):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n=\"function\"===typeof C||\n\"function\"===typeof g.getSnapshotBeforeUpdate)||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?(\"function\"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if(\"number\"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:\"visible\",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:\"hidden\",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:\"visible\",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:\"hidden\",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case \"together\":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"option\":e=eb(a,e);d=eb(a,d);f=[];break;case \"select\":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ca.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&G(\"scroll\",a),f||h===k||(f=[])):\"object\"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case \"dialog\":G(\"cancel\",d);G(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",d);break;case \"video\":case \"audio\":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case \"source\":G(\"error\",d);break;case \"img\":case \"image\":case \"link\":G(\"error\",d);G(\"load\",d);break;case \"details\":G(\"toggle\",d);break;case \"input\":Za(d,f);G(\"invalid\",d);break;case \"select\":d._wrapperState=\n{wasMultiple:!!f.multiple};G(\"invalid\",d);break;case \"textarea\":hb(d,f),G(\"invalid\",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],\"children\"===g?\"string\"===typeof e?d.textContent!==e&&(a=[\"children\",e]):\"number\"===typeof e&&d.textContent!==\"\"+e&&(a=[\"children\",\"\"+e]):ca.hasOwnProperty(g)&&null!=e&&\"onScroll\"===g&&G(\"scroll\",d));switch(c){case \"input\":Va(d);cb(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case \"dialog\":G(\"cancel\",a);G(\"close\",a);\ne=d;break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case \"source\":G(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":G(\"error\",a);G(\"load\",a);e=d;break;case \"details\":G(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);G(\"invalid\",a);break;case \"option\":e=eb(a,d);break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G(\"invalid\",a);break;case \"textarea\":hb(a,d);e=\ngb(a,d);G(\"invalid\",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?tb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==c||\"\"!==k)&&pb(a,k):\"number\"===typeof k&&pb(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ca.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&G(\"scroll\",a):null!=k&&qa(a,f,k,g))}switch(c){case \"input\":Va(a);cb(a,d,!1);\nbreak;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&\"hidden\"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&\"unstable-defer-without-hiding\"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c=\"\",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi=\"function\"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){\"function\"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}var Ui=\"function\"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if(\"function\"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,\"function\"===typeof d.setProperty?d.setProperty(\"display\",\"none\",\"important\"):d.display=\"none\";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty(\"display\")?e.display:null;d.style.display=sb(\"display\",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?\"\":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&\"function\"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if(\"function\"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,\"\"),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;\"input\"===a&&\"radio\"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];\"style\"===g?tb(c,h):\"dangerouslySetInnerHTML\"===g?ob(c,h):\"children\"===g?pb(c,h):qa(c,g,h,b)}switch(a){case \"input\":ab(c,d);break;case \"textarea\":ib(c,d);break;case \"select\":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:\"\",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||\"A React component\")+\" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&(\"function\"===typeof K.getDerivedStateFromError||null!==Q&&\"function\"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if(\"selectionStart\"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,\"\");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&(\"function\"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),\"selectionStart\"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});\"function\"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}\"function\"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&\"function\"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if(\"function\"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if(\"function\"===typeof c.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if(\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if(\"object\"===\ntypeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;\"function\"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:(\"function\"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if(\"function\"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)ji(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if(\"object\"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,\"\"));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute(\"data-reactroot\")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if(\"function\"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if(\"function\"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case \"input\":ab(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:\"17.0.1\",rendererPackageName:\"react-dom\"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;exports.createPortal=uk;\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};exports.hydrate=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};exports.unstable_batchedUpdates=Wj;exports.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};exports.version=\"17.0.1\";\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","import React, { useState } from \"react\";\n\nconst WAVE_STROKE = \"#79beda\";\nconst WAVE_FILL = \"#2b7c9e\";\n\nconst Wave: React.FC<{\n  stroke: string;\n  fill: string;\n}> = ({ stroke, fill }) => (\n  <>\n    {/* Generator: Moho 13.0.3 build 635 */}\n    <path\n      fill={fill}\n      fill-rule=\"evenodd\"\n      stroke={stroke}\n      stroke-width=\"4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M 1272.978 220.566 C 1272.852 220.566 12.696 217.473 12.570 217.473 C 12.570 217.454 12.307 27.724 12.307 27.705 C 12.311 27.706 35.916 41.496 51.663 41.496 C 67.409 41.496 75.272 27.705 91.018 27.705 C 106.764 27.705 114.627 41.496 130.373 41.496 C 146.120 41.496 153.982 27.705 169.729 27.705 C 185.475 27.705 193.338 41.496 209.085 41.496 C 224.831 41.496 232.694 27.705 248.440 27.705 C 264.186 27.705 272.049 41.496 287.795 41.496 C 303.542 41.496 311.405 27.705 327.151 27.705 C 342.898 27.705 350.760 41.496 366.507 41.496 C 382.253 41.496 390.116 27.705 405.862 27.705 C 421.609 27.705 429.471 41.496 445.218 41.496 C 460.964 41.496 468.827 27.705 484.573 27.705 C 500.320 27.705 508.182 41.496 523.929 41.496 C 539.675 41.496 547.538 27.705 563.284 27.705 C 579.031 27.705 586.893 41.496 602.640 41.496 C 618.386 41.496 626.249 27.705 641.995 27.705 C 657.742 27.705 665.604 41.496 681.351 41.496 C 697.097 41.496 704.960 27.705 720.707 27.705 C 736.453 27.705 744.316 41.496 760.062 41.496 C 775.808 41.496 783.671 27.705 799.417 27.705 C 815.164 27.705 823.026 41.496 838.773 41.496 C 854.519 41.496 862.382 27.705 878.129 27.705 C 893.875 27.705 901.738 41.496 917.484 41.496 C 933.230 41.496 941.093 27.705 956.839 27.705 C 972.586 27.705 980.449 41.496 996.195 41.496 C 1011.942 41.496 1019.804 27.705 1035.551 27.705 C 1051.297 27.705 1059.160 41.496 1074.906 41.496 C 1090.652 41.496 1098.515 27.705 1114.261 27.705 C 1130.008 27.705 1137.871 41.496 1153.617 41.496 C 1169.364 41.496 1177.226 27.705 1192.973 27.705 C 1208.719 27.705 1216.582 41.496 1232.328 41.496 C 1248.075 41.496 1271.680 27.706 1271.684 27.705 C 1271.684 27.724 1272.978 220.547 1272.978 220.566 Z\"\n    />\n    <path\n      fill=\"none\"\n      stroke={stroke}\n      stroke-width=\"4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M 12.307 37.713 C 12.311 37.714 35.916 51.504 51.663 51.504 C 67.409 51.504 75.272 37.713 91.018 37.713 C 106.764 37.713 114.627 51.504 130.373 51.504 C 146.120 51.504 153.982 37.713 169.729 37.713 C 185.475 37.713 193.338 51.504 209.085 51.504 C 224.831 51.504 232.694 37.713 248.440 37.713 C 264.186 37.713 272.049 51.504 287.795 51.504 C 303.542 51.504 311.405 37.713 327.151 37.713 C 342.898 37.713 350.760 51.504 366.507 51.504 C 382.253 51.504 390.116 37.713 405.862 37.713 C 421.609 37.713 429.471 51.504 445.218 51.504 C 460.964 51.504 468.827 37.713 484.573 37.713 C 500.320 37.713 508.182 51.504 523.929 51.504 C 539.675 51.504 547.538 37.713 563.284 37.713 C 579.031 37.713 586.893 51.504 602.640 51.504 C 618.386 51.504 626.249 37.713 641.995 37.713 C 657.742 37.713 665.604 51.504 681.351 51.504 C 697.097 51.504 704.960 37.713 720.707 37.713 C 736.453 37.713 744.316 51.504 760.062 51.504 C 775.808 51.504 783.671 37.713 799.417 37.713 C 815.164 37.713 823.026 51.504 838.773 51.504 C 854.519 51.504 862.382 37.713 878.129 37.713 C 893.875 37.713 901.738 51.504 917.484 51.504 C 933.230 51.504 941.093 37.713 956.839 37.713 C 972.586 37.713 980.449 51.504 996.195 51.504 C 1011.942 51.504 1019.804 37.713 1035.551 37.713 C 1051.297 37.713 1059.160 51.504 1074.906 51.504 C 1090.652 51.504 1098.515 37.713 1114.261 37.713 C 1130.008 37.713 1137.871 51.504 1153.617 51.504 C 1169.364 51.504 1177.226 37.713 1192.973 37.713 C 1208.719 37.713 1216.582 51.504 1232.328 51.504 C 1248.075 51.504 1271.680 37.714 1271.684 37.713 \"\n    />\n    <path\n      fill=\"none\"\n      stroke={stroke}\n      stroke-width=\"4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M 12.307 47.544 C 12.311 47.546 35.916 61.335 51.663 61.335 C 67.409 61.335 75.272 47.544 91.018 47.544 C 106.764 47.544 114.627 61.335 130.373 61.335 C 146.120 61.335 153.982 47.544 169.729 47.544 C 185.475 47.544 193.338 61.335 209.085 61.335 C 224.831 61.335 232.694 47.544 248.440 47.544 C 264.186 47.544 272.049 61.335 287.795 61.335 C 303.542 61.335 311.405 47.544 327.151 47.544 C 342.898 47.544 350.760 61.335 366.507 61.335 C 382.253 61.335 390.116 47.544 405.862 47.544 C 421.609 47.544 429.471 61.335 445.218 61.335 C 460.964 61.335 468.827 47.544 484.573 47.544 C 500.320 47.544 508.182 61.335 523.929 61.335 C 539.675 61.335 547.538 47.544 563.284 47.544 C 579.031 47.544 586.893 61.335 602.640 61.335 C 618.386 61.335 626.249 47.544 641.995 47.544 C 657.742 47.544 665.604 61.335 681.351 61.335 C 697.097 61.335 704.960 47.544 720.707 47.544 C 736.453 47.544 744.316 61.335 760.062 61.335 C 775.808 61.335 783.671 47.544 799.417 47.544 C 815.164 47.544 823.026 61.335 838.773 61.335 C 854.519 61.335 862.382 47.544 878.129 47.544 C 893.875 47.544 901.738 61.335 917.484 61.335 C 933.230 61.335 941.093 47.544 956.839 47.544 C 972.586 47.544 980.449 61.335 996.195 61.335 C 1011.942 61.335 1019.804 47.544 1035.551 47.544 C 1051.297 47.544 1059.160 61.335 1074.906 61.335 C 1090.652 61.335 1098.515 47.544 1114.261 47.544 C 1130.008 47.544 1137.871 61.335 1153.617 61.335 C 1169.364 61.335 1177.226 47.544 1192.973 47.544 C 1208.719 47.544 1216.582 61.335 1232.328 61.335 C 1248.075 61.335 1271.680 47.546 1271.684 47.544 \"\n    />\n    <path\n      fill=\"none\"\n      stroke={stroke}\n      stroke-width=\"4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M 12.307 57.012 C 12.311 57.014 35.916 70.804 51.663 70.804 C 67.409 70.804 75.272 57.012 91.018 57.012 C 106.764 57.012 114.627 70.804 130.373 70.804 C 146.120 70.804 153.982 57.013 169.729 57.012 C 185.475 57.012 193.338 70.804 209.085 70.804 C 224.831 70.804 232.694 57.012 248.440 57.012 C 264.186 57.012 272.049 70.804 287.795 70.804 C 303.542 70.804 311.405 57.012 327.151 57.012 C 342.898 57.013 350.760 70.804 366.507 70.804 C 382.253 70.804 390.116 57.013 405.862 57.012 C 421.609 57.012 429.471 70.804 445.218 70.804 C 460.964 70.804 468.827 57.012 484.573 57.012 C 500.320 57.012 508.182 70.804 523.929 70.804 C 539.675 70.804 547.538 57.013 563.284 57.012 C 579.031 57.012 586.893 70.804 602.640 70.804 C 618.386 70.804 626.249 57.012 641.995 57.012 C 657.742 57.012 665.604 70.804 681.351 70.804 C 697.097 70.804 704.960 57.012 720.707 57.012 C 736.453 57.013 744.316 70.804 760.062 70.804 C 775.808 70.804 783.671 57.012 799.417 57.012 C 815.164 57.012 823.026 70.804 838.773 70.804 C 854.519 70.804 862.382 57.012 878.129 57.012 C 893.875 57.013 901.738 70.804 917.484 70.804 C 933.230 70.804 941.093 57.013 956.839 57.012 C 972.586 57.012 980.449 70.804 996.195 70.804 C 1011.942 70.804 1019.804 57.012 1035.551 57.012 C 1051.297 57.012 1059.160 70.804 1074.906 70.804 C 1090.652 70.804 1098.515 57.013 1114.261 57.012 C 1130.008 57.012 1137.871 70.804 1153.617 70.804 C 1169.364 70.804 1177.226 57.012 1192.973 57.012 C 1208.719 57.012 1216.582 70.804 1232.328 70.804 C 1248.075 70.804 1271.680 57.014 1271.684 57.012 \"\n    />\n    <path\n      fill=\"none\"\n      stroke={stroke}\n      stroke-width=\"4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      d=\"M 12.307 66.844 C 12.311 66.845 35.916 80.635 51.663 80.635 C 67.409 80.635 75.272 66.844 91.018 66.844 C 106.764 66.844 114.627 80.635 130.373 80.635 C 146.120 80.635 153.982 66.844 169.729 66.844 C 185.475 66.844 193.338 80.635 209.085 80.635 C 224.831 80.635 232.694 66.844 248.440 66.844 C 264.186 66.844 272.049 80.635 287.795 80.635 C 303.542 80.635 311.405 66.844 327.151 66.844 C 342.898 66.844 350.760 80.635 366.507 80.635 C 382.253 80.635 390.116 66.844 405.862 66.844 C 421.609 66.844 429.471 80.635 445.218 80.635 C 460.964 80.635 468.827 66.844 484.573 66.844 C 500.320 66.844 508.182 80.635 523.929 80.635 C 539.675 80.635 547.538 66.844 563.284 66.844 C 579.031 66.844 586.893 80.635 602.640 80.635 C 618.386 80.635 626.249 66.844 641.995 66.844 C 657.742 66.844 665.604 80.635 681.351 80.635 C 697.097 80.635 704.960 66.844 720.707 66.844 C 736.453 66.844 744.316 80.635 760.062 80.635 C 775.808 80.635 783.671 66.844 799.417 66.844 C 815.164 66.844 823.026 80.635 838.773 80.635 C 854.519 80.635 862.382 66.844 878.129 66.844 C 893.875 66.844 901.738 80.635 917.484 80.635 C 933.230 80.635 941.093 66.844 956.839 66.844 C 972.586 66.844 980.449 80.635 996.195 80.635 C 1011.942 80.635 1019.804 66.844 1035.551 66.844 C 1051.297 66.844 1059.160 80.635 1074.906 80.635 C 1090.652 80.635 1098.515 66.844 1114.261 66.844 C 1130.008 66.844 1137.871 80.635 1153.617 80.635 C 1169.364 80.635 1177.226 66.844 1192.973 66.844 C 1208.719 66.844 1216.582 80.635 1232.328 80.635 C 1248.075 80.635 1271.680 66.845 1271.684 66.844 \"\n    />\n  </>\n);\n\nconst NUM_WAVES = 8;\nconst WAVE_DURATION = 1;\nconst WAVE_PARALLAX_SCALE_START = 1.2;\nconst WAVE_PARALLAX_TRANSLATE_START = 10;\nconst WAVE_PARALLAX_SCALE_VELOCITY = 1.25;\nconst WAVE_PARALLAX_TRANSLATE_VELOCITY = 30;\nconst WAVE_PARALLAX_TRANSLATE_ACCEL = 10;\n\nconst NumericSlider: React.FC<{\n  id: string;\n  label: string;\n  onChange: (value: number) => void;\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n  valueSuffix?: string;\n}> = (props) => {\n  return (\n    <p>\n      <label htmlFor={props.id}>{props.label}</label>\n      <input\n        type=\"range\"\n        id={props.id}\n        min={props.min}\n        max={props.max}\n        value={props.value}\n        step={props.step}\n        onChange={(e) => props.onChange(parseFloat(e.target.value))}\n      />\n      <span>\n        {\" \"}\n        {props.value}\n        {props.valueSuffix}\n      </span>\n    </p>\n  );\n};\n\nconst Waves: React.FC<{}> = () => {\n  const [stroke, setStroke] = useState(WAVE_STROKE);\n  const [fill, setFill] = useState(WAVE_FILL);\n  const [numWaves, setNumWaves] = useState(NUM_WAVES);\n  const [duration, setDuration] = useState(WAVE_DURATION);\n  const [initialYVel, setInitialYVel] = useState(\n    WAVE_PARALLAX_TRANSLATE_VELOCITY\n  );\n  const [yAccel, setYAccel] = useState(WAVE_PARALLAX_TRANSLATE_ACCEL);\n  const [scaleVel, setScaleVel] = useState(WAVE_PARALLAX_SCALE_VELOCITY);\n\n  let scale = WAVE_PARALLAX_SCALE_START;\n  let y = WAVE_PARALLAX_TRANSLATE_START;\n  let yVel = initialYVel;\n  let waves: JSX.Element[] = [];\n\n  for (let i = 0; i < numWaves; i++) {\n    waves.push(\n      <g key={i} transform={`translate(0 ${y}) scale(${scale} ${scale})`}>\n        <g>\n          <Wave fill={fill} stroke={stroke} />\n          <animateTransform\n            attributeName=\"transform\"\n            type=\"translate\"\n            from=\"-179 0\"\n            to=\"-100 0\"\n            dur={`${duration}s`}\n            begin=\"0s\"\n            fill=\"freeze\"\n            repeatCount=\"indefinite\"\n          />\n        </g>\n      </g>\n    );\n    y += yVel;\n    scale *= scaleVel;\n    yVel += yAccel;\n  }\n\n  return (\n    <>\n      <svg width=\"1280px\" height=\"720px\" viewBox=\"0 0 1280 720\">\n        {waves}\n      </svg>\n      <p>\n        <label htmlFor=\"stroke\">Stroke: </label>\n        <input\n          type=\"color\"\n          value={stroke}\n          onChange={(e) => setStroke(e.target.value)}\n          id=\"stroke\"\n        />{\" \"}\n        <label htmlFor=\"fill\">Fill: </label>\n        <input\n          type=\"color\"\n          value={fill}\n          onChange={(e) => setFill(e.target.value)}\n          id=\"fill\"\n        />\n      </p>\n      <NumericSlider\n        id=\"numWaves\"\n        label=\"Number of waves\"\n        min={1}\n        max={NUM_WAVES * 2}\n        value={numWaves}\n        step={1}\n        onChange={setNumWaves}\n      />\n      <NumericSlider\n        id=\"duration\"\n        label=\"Cycle duration\"\n        min={0.1}\n        max={3}\n        value={duration}\n        step={0.1}\n        onChange={setDuration}\n        valueSuffix=\"s\"\n      />\n      <NumericSlider\n        id=\"initialYVel\"\n        label=\"Initial y-velocity\"\n        min={1}\n        max={WAVE_PARALLAX_TRANSLATE_VELOCITY * 4}\n        value={initialYVel}\n        step={1}\n        onChange={setInitialYVel}\n      />\n      <NumericSlider\n        id=\"yAccel\"\n        label=\"Y-acceleration\"\n        min={1}\n        max={WAVE_PARALLAX_TRANSLATE_ACCEL * 2}\n        value={yAccel}\n        step={1}\n        onChange={setYAccel}\n      />\n      <NumericSlider\n        id=\"scaleVel\"\n        label=\"Scale velocity\"\n        min={1.0}\n        max={2}\n        value={scaleVel}\n        step={0.025}\n        onChange={setScaleVel}\n      />\n    </>\n  );\n};\n\nexport const WavesPage: React.FC<{}> = () => (\n  <>\n    <h1>Waves!</h1>\n    <Waves />\n  </>\n);\n","export function float(value: string | number | undefined): number {\n  if (typeof value === \"number\") return value;\n  if (value === undefined) value = \"\";\n\n  const float = parseFloat(value);\n\n  if (isNaN(float)) {\n    throw new Error(`Expected '${value}' to be a float!`);\n  }\n\n  return float;\n}\n\nexport function flatten<T>(arr: T[][]): T[] {\n  const result: T[] = [];\n\n  for (let subarr of arr) {\n    result.push(...subarr);\n  }\n\n  return result;\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bezier = void 0;\n// math-inlining.\nconst {\n  abs,\n  cos,\n  sin,\n  acos,\n  atan2,\n  sqrt,\n  pow\n} = Math; // cube root function yielding real roots\n\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n} // trig constants\n\n\nconst pi = Math.PI,\n      tau = 2 * pi,\n      quart = pi / 2,\n      // float precision significant decimal\nepsilon = 0.000001,\n      // extremas used in bbox calculation and similar algorithms\nnMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n      nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n      // a zero coordinate, which is surprisingly useful\nZERO = {\n  x: 0,\n  y: 0,\n  z: 0\n}; // Bezier utility functions\n\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n\n    return sqrt(l);\n  },\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points; // constant?\n\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    } // linear?\n\n\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t\n      };\n\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n\n      return ret;\n    } // quadratic/cubic curve?\n\n\n    if (order < 4) {\n      let mt2 = mt * mt,\n          t2 = t * t,\n          a,\n          b,\n          c,\n          d = 0;\n\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t\n      };\n\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n\n      return ret;\n    } // higher order curves: use de Casteljau's computation\n\n\n    const dCpts = JSON.parse(JSON.stringify(points));\n\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n        };\n\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n          r = ratios,\n          p = points;\n    let f1 = r[0],\n        f2 = r[1],\n        f3 = r[2],\n        f4 = r[3],\n        d; // spec for linear\n\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t\n      };\n    } // upgrade to quadratic\n\n\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t\n      };\n    } // upgrade to cubic\n\n\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t\n      };\n    }\n  },\n  derive: function (points, _3d) {\n    const dpoints = [];\n\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y)\n        };\n\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n\n        list.push(dpt);\n      }\n\n      dpoints.push(list);\n      p = list;\n    }\n\n    return dpoints;\n  },\n  between: function (v, m, M) {\n    return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);\n  },\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n  length: function (derivativeFn) {\n    const z = 0.5,\n          len = utils.Tvalues.length;\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n\n    return z * sum;\n  },\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n          d2 = te - ts,\n          v2 = v - ds,\n          r = v2 / d1;\n    return ts + d2 * r;\n  },\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y)\n    };\n\n    if (!!v1.z && !!v2.z) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n\n    return ret;\n  },\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n\n    return s;\n  },\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n          dy1 = v1.y - o.y,\n          dx2 = v2.x - o.x,\n          dy2 = v2.y - o.y,\n          cross = dx1 * dy2 - dy1 * dx2,\n          dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n        mpos,\n        d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return {\n      mdist: mdist,\n      mpos: mpos\n    };\n  },\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const bottom = pow(t, n) + pow(1 - t, n),\n          top = bottom - 1;\n    return abs(top / bottom);\n  },\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const top = pow(1 - t, n),\n          bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n          ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n          d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n    if (d == 0) {\n      return false;\n    }\n\n    return {\n      x: nx / d,\n      y: ny / d\n    };\n  },\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          x3 = p3.x,\n          y3 = p3.y,\n          x4 = p4.x,\n          y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n  makeline: function (p1, p2) {\n    const x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          dx = (x2 - x1) / 3,\n          dy = (y2 - y1) / 3;\n    return new Bezier(x1, y1, x1 + dx, y1 + dy, x1 + 2 * dx, y1 + 2 * dy, x2, y2);\n  },\n  findbbox: function (sections) {\n    let mx = nMax,\n        my = nMax,\n        MX = nMin,\n        MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: {\n        min: mx,\n        mid: (mx + MX) / 2,\n        max: MX,\n        size: MX - mx\n      },\n      y: {\n        min: my,\n        mid: (my + MY) / 2,\n        max: MY,\n        size: MY - my\n      }\n    };\n  },\n  shapeintersections: function (s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end])\n    };\n\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);\n    };\n\n    return shape;\n  },\n  getminmax: function (curve, d, list) {\n    if (!list) return {\n      min: 0,\n      max: 0\n    };\n    let min = nMax,\n        max = nMin,\n        t,\n        c;\n\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n\n      if (c[d] < min) {\n        min = c[d];\n      }\n\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n\n    return {\n      min: min,\n      mid: (min + max) / 2,\n      max: max,\n      size: max - min\n    };\n  },\n  align: function (points, line) {\n    const tx = line.p1.x,\n          ty = line.p1.y,\n          a = -atan2(line.p2.y - ty, line.p2.x - tx),\n          d = function (v) {\n      return {\n        x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n        y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n      };\n    };\n\n    return points.map(d);\n  },\n  roots: function (points, line) {\n    line = line || {\n      p1: {\n        x: 0,\n        y: 0\n      },\n      p2: {\n        x: 1,\n        y: 0\n      }\n    };\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n            b = aligned[1].y,\n            c = aligned[2].y,\n            d = a - 2 * b + c;\n\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n\n      return [];\n    } // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n\n\n    const pa = aligned[0].y,\n          pb = aligned[1].y,\n          pc = aligned[2].y,\n          pd = aligned[3].y;\n    let d = -pa + 3 * pb - 3 * pc + pd,\n        a = 3 * pa - 6 * pb + 3 * pc,\n        b = -3 * pa + 3 * pb,\n        c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        } // linear solution:\n\n\n        return [-c / b].filter(reduce);\n      } // quadratic solution:\n\n\n      const q = sqrt(b * b - 4 * a * c),\n            a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    } // at this point, we know we need a cubic solution:\n\n\n    a /= d;\n    b /= d;\n    c /= d;\n    const p = (3 * b - a * a) / 3,\n          p3 = p / 3,\n          q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n          q2 = q / 2,\n          discriminant = q2 * q2 + p3 * p3 * p3;\n    let u1, v1, x1, x2, x3;\n\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n            mp33 = mp3 * mp3 * mp3,\n            r = sqrt(mp33),\n            t = -q / (2 * r),\n            cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n            phi = acos(cosphi),\n            crtr = crt(r),\n            t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n            b = p[1],\n            c = p[2],\n            d = a - 2 * b + c;\n\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n\n      return [];\n    } // linear roots are even easier\n\n\n    if (p.length === 2) {\n      const a = p[0],\n            b = p[1];\n\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n\n      return [];\n    }\n\n    return [];\n  },\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n        dnm,\n        adk,\n        dk,\n        k = 0,\n        r = 0; //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return {\n        k: 0,\n        r: 0\n      };\n    }\n\n    k = num / dnm;\n    r = dnm / num; // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return {\n      k: k,\n      r: r,\n      dk: dk,\n      adk: adk\n    };\n  },\n  inflections: function (points) {\n    if (points.length < 4) return []; // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, {\n      p1: points[0],\n      p2: points.slice(-1)[0]\n    }),\n          a = p[2].x * p[1].y,\n          b = p[3].x * p[1].y,\n          c = p[1].x * p[2].y,\n          d = p[3].x * p[2].y,\n          v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n          v2 = 18 * (3 * a - b - 3 * c),\n          v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n          sq = Math.sqrt(trm),\n          d2 = 2 * v1;\n    if (utils.approximately(d2, 0)) return [];\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n          len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n\n    return true;\n  },\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n          c2b = c2.bbox(),\n          r = 100000,\n          threshold = curveIntersectionThreshold || 0.5;\n\n    if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n      return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + \"/\" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];\n    }\n\n    let cc1 = c1.split(0.5),\n        cc2 = c2.split(0.5),\n        pairs = [{\n      left: cc1.left,\n      right: cc2.left\n    }, {\n      left: cc1.left,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.left\n    }];\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n    let results = [];\n    if (pairs.length === 0) return results;\n    pairs.forEach(function (pair) {\n      results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));\n    });\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n    return results;\n  },\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n          dy1 = p2.y - p1.y,\n          dx2 = p3.x - p2.x,\n          dy2 = p3.y - p2.y,\n          dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n          dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n          dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n          dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n          // chord midpoints\n    mx1 = (p1.x + p2.x) / 2,\n          my1 = (p1.y + p2.y) / 2,\n          mx2 = (p2.x + p3.x) / 2,\n          my2 = (p2.y + p3.y) / 2,\n          // midpoint offsets\n    mx1n = mx1 + dx1p,\n          my1n = my1 + dy1p,\n          mx2n = mx2 + dx2p,\n          my2n = my2 + dy2p,\n          // intersection of these lines:\n    arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n          r = utils.dist(arc, p1); // arc start/end values, over mid point:\n\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n        m = atan2(p2.y - arc.y, p2.x - arc.x),\n        e = atan2(p3.y - arc.y, p3.x - arc.x),\n        _; // determine arc direction (cw/ccw correction)\n\n\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    } // assign and done.\n\n\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n  numberSort: function (a, b) {\n    return a - b;\n  }\n};\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\n\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return \"[\" + this.curves.map(function (curve) {\n      return utils.pointsToString(curve.points);\n    }).join(\", \") + \"]\";\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves.map(function (v) {\n      return v.length();\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n\n}\n/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n// math-inlining.\n\n\nconst {\n  abs: abs$1,\n  min,\n  max,\n  cos: cos$1,\n  sin: sin$1,\n  acos: acos$1,\n  sqrt: sqrt$1\n} = Math;\nconst pi$1 = Math.PI;\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\n\nclass Bezier {\n  constructor(coords) {\n    let args = coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === \"object\") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        [\"x\", \"y\", \"z\"].forEach(function (d) {\n          if (typeof point[d] !== \"undefined\") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\"Only new Bezier(point[]) is accepted for 4th and higher order curves\");\n        }\n      }\n    }\n\n    const _3d = this._3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== \"undefined\";\n\n    const points = this.points = [];\n\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1]\n      };\n\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n\n      points.push(point);\n    }\n\n    const order = this.order = points.length - 1;\n    const dims = this.dims = [\"x\", \"y\"];\n    if (_3d) dims.push(\"z\");\n    this.dimlen = dims.length;\n    const aligned = utils.align(points, {\n      p1: points[0],\n      p2: points[order]\n    });\n    this._linear = !aligned.some(p => abs$1(p.y) > 0.0001);\n    this._lut = [];\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } // shortcuts, although they're really dumb\n\n\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    } // real fitting.\n\n\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    }\n\n    const abc = Bezier.getABC(3, S, B, E, t);\n\n    if (typeof d1 === \"undefined\") {\n      d1 = utils.dist(B, abc.C);\n    }\n\n    const d2 = d1 * (1 - t) / t;\n    const selen = utils.dist(S, E),\n          lx = (E.x - S.x) / selen,\n          ly = (E.y - S.y) / selen,\n          bx1 = d1 * lx,\n          by1 = d1 * ly,\n          bx2 = d2 * lx,\n          by2 = d2 * ly; // derivation of new hull coordinates\n\n    const e1 = {\n      x: B.x - bx1,\n      y: B.y - by1\n    },\n          e2 = {\n      x: B.x + bx2,\n      y: B.y + by2\n    },\n          A = abc.A,\n          v1 = {\n      x: A.x + (e1.x - A.x) / (1 - t),\n      y: A.y + (e1.y - A.y) / (1 - t)\n    },\n          v2 = {\n      x: A.x + (e2.x - A.x) / t,\n      y: A.y + (e2.y - A.y) / t\n    },\n          nc1 = {\n      x: S.x + (v1.x - S.x) / t,\n      y: S.y + (v1.y - S.y) / t\n    },\n          nc2 = {\n      x: E.x + (v2.x - E.x) / (1 - t),\n      y: E.y + (v2.y - E.y) / (1 - t)\n    }; // ...done\n\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n          x = p[0].x,\n          y = p[0].y,\n          s = [\"M\", x, y, this.order === 2 ? \"Q\" : \"C\"];\n\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n\n    return s.join(\" \");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error(\"incorrect number of ratio values\");\n    }\n\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points.map(function (c, pos) {\n      return \"\" + pos + c.x + c.y + (c.z ? c.z : 0);\n    }).join(\"\");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n          um = 1 - u,\n          C = {\n      x: u * S.x + um * E.x,\n      y: u * S.y + um * E.y\n    },\n          s = utils.abcratio(t, order),\n          A = {\n      x: B.x + (B.x - C.x) / s,\n      y: B.y + (B.y - C.y) / s\n    };\n    return {\n      A,\n      B,\n      C,\n      S,\n      E\n    };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n\n    this._lut = []; // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n\n    steps--;\n\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n\n      this._lut.push(p);\n    }\n\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n          hits = [];\n\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n\n    if (!hits.length) return false;\n    return t /= hits.length;\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n          l = LUT.length - 1,\n          closest = utils.closest(LUT, point),\n          mpos = closest.mpos,\n          t1 = (mpos - 1) / l,\n          t2 = (mpos + 1) / l,\n          step = 0.1 / l; // step 2: fine check\n\n    let mdist = closest.mdist,\n        t = t1,\n        ft = t,\n        p;\n    mdist += 1;\n\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n          np = [p[0]],\n          k = p.length;\n\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: (k - i) / k * pi.x + i / k * pim.x,\n        y: (k - i) / k * pi.y + i / k * pim.y\n      };\n    }\n\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0]);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1]);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, {\n      p1: p[0],\n      p2: p[p.length - 1]\n    }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = sqrt$1(d.x * d.x + d.y * d.y);\n    return {\n      x: -d.y / q,\n      y: d.x / q\n    };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n          r2 = this.derivative(t + 0.01),\n          q1 = sqrt$1(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n          q2 = sqrt$1(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2; // cross product\n\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x\n    };\n    const m = sqrt$1(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m; // rotation matrix\n\n    const R = [c.x * c.x, c.x * c.y - c.z, c.x * c.z + c.y, c.x * c.y + c.z, c.y * c.y, c.y * c.z - c.x, c.x * c.z - c.y, c.y * c.z + c.x, c.z * c.z]; // normal vector:\n\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n        _p = [],\n        q = [],\n        idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    } // we lerp between all points at each iteration, until we have 1 point left.\n\n\n    while (p.length > 1) {\n      _p = [];\n\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n\n        _p.push(pt);\n      }\n\n      p = _p;\n    }\n\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n\n    if (t2 === 1) {\n      return this.split(t1).right;\n    } // no shortcut: use \"de Casteljau\" iteration.\n\n\n    const q = this.hull(t1);\n    const result = {\n      left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),\n      right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q\n    }; // make sure we bind _t1/_t2 information!\n\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2); // if we have no t2, we're done\n\n    if (!t2) {\n      return result;\n    } // if we have a t2, split again:\n\n\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n    this.dims.forEach(function (dim) {\n      let mfn = function (v) {\n        return v[dim];\n      };\n\n      let p = this.dpoints[0].map(mfn);\n      result[dim] = utils.droots(p);\n\n      if (this.order === 3) {\n        p = this.dpoints[1].map(mfn);\n        result[dim] = result[dim].concat(utils.droots(p));\n      }\n\n      result[dim] = result[dim].filter(function (t) {\n        return t >= 0 && t <= 1;\n      });\n      roots = roots.concat(result[dim].sort(utils.numberSort));\n    }.bind(this));\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n          result = {};\n    this.dims.forEach(function (d) {\n      result[d] = utils.getminmax(this, d, extrema[d]);\n    }.bind(this));\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n          tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== \"undefined\") {\n      const c = this.get(t),\n            n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d\n      };\n\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n\n      return ret;\n    }\n\n    if (this._linear) {\n      const nv = this.normal(0),\n            coords = this.points.map(function (p) {\n        const ret = {\n          x: p.x + t * nv.x,\n          y: p.y + t * nv.y\n        };\n\n        if (p.z && nv.z) {\n          ret.z = p.z + t * nv.z;\n        }\n\n        return ret;\n      });\n      return [new Bezier(coords)];\n    }\n\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0) return false;\n    }\n\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n\n    return abs$1(acos$1(s)) < pi$1 / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n        t1 = 0,\n        t2 = 0,\n        step = 0.01,\n        segment,\n        pass1 = [],\n        pass2 = []; // first pass: split on extrema\n\n    let extrema = this.extrema().values;\n\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    } // second pass: further reduce these segments to simple segments\n\n\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n\n          if (!segment.simple()) {\n            t2 -= step;\n\n            if (abs$1(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n\n    if (typeof d === \"function\") {\n      distanceFn = d;\n    }\n\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    } // TODO: add special handling for degenerate (=linear) curves.\n\n\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error(\"cannot scale this curve. Try reducing it first.\");\n    } // move all points by distance 'd' wrt the origin 'o'\n    // move end points by fixed distance along normal.\n\n\n    [0, 1].forEach(function (t) {\n      const p = np[t * order] = utils.copy(points[t * order]);\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach(t => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = {\n          x: p.x + d.x,\n          y: p.y + d.y\n        };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    } // move control points by \"however much necessary to\n    // ensure the correct tangent to endpoint\".\n\n\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = sqrt$1(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === \"undefined\" ? d1 : d2;\n    const reduced = this.reduce(),\n          len = reduced.length,\n          fcurves = [];\n    let bcurves = [],\n        p,\n        alen = 0,\n        tlen = this.length();\n    const graduated = typeof d3 !== \"undefined\" && typeof d4 !== \"undefined\";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n              f2 = (alen + slen) / tlen,\n              d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    } // form curve oulines\n\n\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n\n      if (graduated) {\n        fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));\n        bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n\n      alen += slen;\n    }); // reverse the \"return\" outline\n\n    bcurves = bcurves.map(function (s) {\n      p = s.points;\n\n      if (p[3]) {\n        s.points = [p[3], p[2], p[1], p[0]];\n      } else {\n        s.points = [p[2], p[1], p[0]];\n      }\n\n      return s;\n    }).reverse(); // form the endcaps as lines\n\n    const fs = fcurves[0].points[0],\n          fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n          bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n          be = bcurves[0].points[0],\n          ls = utils.makeline(bs, fs),\n          le = utils.makeline(fe, be),\n          segments = [ls].concat(fcurves).concat([le]).concat(bcurves);\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(outline[i], outline[len - i], curveIntersectionThreshold);\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n\n    return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n          my = min(line.p1.y, line.p2.y),\n          MX = max(line.p1.x, line.p2.x),\n          MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter(t => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // \"simple\" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n    const reduced = this.reduce(),\n          len = reduced.length - 2,\n          results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = []; // step 1: pair off any overlapping segments\n\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({\n            left: l,\n            right: r\n          });\n        }\n      });\n    }); // step 2: for each pairing, run through the convergence algorithm.\n\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);\n\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n          c1 = this.get(s + q),\n          c2 = this.get(e - q),\n          ref = utils.dist(pc, np1),\n          d1 = utils.dist(pc, c1),\n          d2 = utils.dist(pc, c2);\n    return abs$1(d1 - ref) + abs$1(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n        t_e = 1,\n        safety; // we do a binary search to find the \"good `t` closest to no-longer-good\"\n\n    do {\n      safety = 0; // step 1: start with the maximum possible arc\n\n      t_e = 1; // points:\n\n      let np1 = this.get(t_s),\n          np2,\n          np3,\n          arc,\n          prev_arc; // booleans:\n\n      let curr_good = false,\n          prev_good = false,\n          done; // numbers:\n\n      let t_m = t_e,\n          prev_e = 1; // step 2: find the best possible arc\n\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n        arc = utils.getccenter(np1, np2, np3); //also save the t values\n\n        arc.interval = {\n          start: t_s,\n          end: t_e\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n\n        curr_good = error <= errorThreshold;\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e; // this arc is fine: we can move 'e' up to see if we can find a wider arc\n\n        if (curr_good) {\n          // if e is already at max, then we're done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc; // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc's end angle is correct with respect to the bezier end point.\n\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * cos$1(arc.e),\n                y: arc.y + arc.r * sin$1(arc.e)\n              };\n              arc.e += utils.angle({\n                x: arc.x,\n                y: arc.y\n              }, d, this.get(1));\n            }\n\n            break;\n          } // if not, move it up by half the iteration distance\n\n\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move 'e' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      } // console.log(\"L835: [F] arc found\", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n\n    return circles;\n  }\n\n}\n\nexports.Bezier = Bezier;\n","import { Bezier } from \"../vendor/bezier-js\";\nimport { float } from \"./util\";\n\nexport function pathToShapes(path: string): Bezier[][] {\n  const parts = path.trim().split(\" \");\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  const shapes: Bezier[][] = [];\n  let currShape: Bezier[] = [];\n\n  const chomp = () => {\n    if (i >= parts.length) {\n      throw new Error(`Ran out of path parts!`);\n    }\n    const val = parts[i];\n    i++;\n    return val;\n  };\n\n  const finishCurrShape = () => {\n    if (currShape.length) {\n      shapes.push(currShape);\n      currShape = [];\n    }\n  };\n\n  while (i < parts.length) {\n    const command = chomp();\n    switch (command) {\n      case \"M\":\n        finishCurrShape();\n        x = float(chomp());\n        y = float(chomp());\n        break;\n      case \"C\":\n        const x1 = float(chomp());\n        const y1 = float(chomp());\n        const x2 = float(chomp());\n        const y2 = float(chomp());\n        const endX = float(chomp());\n        const endY = float(chomp());\n        currShape.push(new Bezier(x, y, x1, y1, x2, y2, endX, endY));\n        x = endX;\n        y = endY;\n        break;\n      case \"Z\":\n        finishCurrShape();\n        break;\n      default:\n        throw new Error(`Unknown SVG path command: '${command}'`);\n    }\n  }\n\n  finishCurrShape();\n\n  return shapes;\n}\n","import { Bezier, Point, BBox, MinMax } from \"../vendor/bezier-js\";\nimport { SVGProps } from \"react\";\n\nimport type { SvgSymbolElement } from \"./vocabulary\";\nimport { flatten, float } from \"./util\";\nimport { pathToShapes } from \"./path\";\n\nexport function getBoundingBoxSize(bbox: BBox): [number, number] {\n  const width = bbox.x.max - bbox.x.min;\n  const height = bbox.y.max - bbox.y.min;\n\n  return [width, height];\n}\n\nexport function getBoundingBoxCenter(bbox: BBox): Point {\n  const [width, height] = getBoundingBoxSize(bbox);\n\n  return {\n    x: bbox.x.min + width / 2,\n    y: bbox.y.min + height / 2,\n  };\n}\n\nfunction dilateMinMax(minmax: MinMax, amount: number): MinMax {\n  return {\n    min: minmax.min - amount,\n    max: minmax.max + amount,\n  };\n}\n\nexport function dilateBoundingBox(bbox: BBox, amount: number): BBox {\n  return {\n    x: dilateMinMax(bbox.x, amount),\n    y: dilateMinMax(bbox.y, amount),\n  };\n}\n\nexport function coalesceBoundingBoxes(bboxes: BBox[]): BBox {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  if (bboxes.length === 0) {\n    throw new Error(`Must have at least one bounding box!`);\n  }\n\n  for (let bbox of bboxes) {\n    if (bbox.x.min < minX) {\n      minX = bbox.x.min;\n    }\n    if (bbox.x.max > maxX) {\n      maxX = bbox.x.max;\n    }\n    if (bbox.y.min < minY) {\n      minY = bbox.y.min;\n    }\n    if (bbox.y.max > maxY) {\n      maxY = bbox.y.max;\n    }\n  }\n\n  return { x: { min: minX, max: maxX }, y: { min: minY, max: maxY } };\n}\n\nexport function getBoundingBoxForBeziers(beziers: Bezier[]): BBox {\n  return coalesceBoundingBoxes(beziers.map((b) => b.bbox()));\n}\n\nfunction getPathBoundingBox(props: SVGProps<SVGPathElement>): BBox {\n  if (!props.d) {\n    throw new Error(`SVG path has no 'd' attribute value!`);\n  }\n  const beziers = flatten(pathToShapes(props.d));\n  const bbox = getBoundingBoxForBeziers(beziers);\n  return props.strokeWidth\n    ? dilateBoundingBox(bbox, float(props.strokeWidth) / 2)\n    : bbox;\n}\n\nexport function getSvgBoundingBox(\n  element: SvgSymbolElement | SvgSymbolElement[]\n): BBox {\n  if (Array.isArray(element)) {\n    return coalesceBoundingBoxes(element.map(getSvgBoundingBox));\n  }\n  switch (element.tagName) {\n    case \"g\":\n      return getSvgBoundingBox(element.children);\n    case \"path\":\n      return getPathBoundingBox(element.props);\n  }\n}\n","export const STROKE_REPLACEMENT_COLOR = \"#000000\";\nexport const FILL_REPLACEMENT_COLOR = \"#ffffff\";\n\nexport const TAIL_ATTACHMENT_COLOR = \"#ff0000\";\nexport const LEG_ATTACHMENT_COLOR = \"#ffff00\";\nexport const ARM_ATTACHMENT_COLOR = \"#00ff00\";\nexport const HORN_ATTACHMENT_COLOR = \"#00ffff\";\nexport const CROWN_ATTACHMENT_COLOR = \"#0000ff\";\n\nexport const NESTING_BOUNDING_BOX_COLOR = \"#ff00ff\";\n","module.exports=[{name:\"Antler\",bbox:{x:{min:55.4,max:654.258},y:{min:12.507,max:712.1324811344522}},layers:[{tagName:\"g\",props:{id:\"antler\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 57.900 656.513 C 57.908 656.501 86.784 587.231 134.203 537.699 C 167.186 503.245 196.199 483.418 218.209 463.118 C 246.812 436.736 288.261 354.989 272.421 289.976 C 251.521 204.194 176.806 180.097 176.796 180.087 C 176.810 180.097 273.978 165.791 314.544 288.833 C 334.695 349.955 307.988 421.186 307.988 421.200 C 307.998 421.194 379.705 385.723 415.079 367.234 C 460.636 343.424 498.133 317.258 537.632 254.446 C 601.394 153.050 492.257 15.018 492.252 15.007 C 492.260 15.016 648.097 124.489 588.556 274.433 C 547.857 376.926 442.535 419.672 442.521 419.687 C 442.529 419.691 479.821 463.705 525.428 463.809 C 599.569 463.978 651.745 409.482 651.758 409.476 C 651.746 409.486 638.271 491.543 531.650 508.991 C 457.066 521.196 387.905 449.380 387.891 449.374 C 387.874 449.384 291.042 465.231 219.117 553.367 C 162.505 622.739 159.306 709.404 159.308 709.415 C 159.302 709.413 119.971 712.008 93.301 699.323 C 74.491 690.378 57.904 656.517 57.900 656.513 Z\"},children:[]}]}]},{name:\"Bicycle\",bbox:{x:{min:92.462,max:1187.538},y:{min:18.514876097366248,max:689.013}},layers:[{tagName:\"g\",props:{id:\"bicycle\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"9\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 906.764 120.315 C 906.770 120.309 972.940 128.890 962.517 57.768 C 955.251 8.187 789.768 26.208 789.753 26.208 C 789.758 26.220 837.820 153.076 837.824 153.089 C 837.837 153.120 965.810 467.267 965.823 467.298 M 837.824 153.089 C 837.807 153.116 723.086 335.330 665.752 426.395 C 679.234 434.690 688.356 449.901 688.355 467.298 C 688.355 494.062 666.764 515.652 640.000 515.652 C 613.236 515.652 591.595 494.062 591.506 467.016 C 519.808 466.657 390.832 466.229 314.177 467.298 C 314.188 467.270 446.837 153.120 446.850 153.089 C 446.889 153.089 837.785 153.089 837.824 153.089 M 614.654 426.067 C 621.898 421.587 630.632 418.943 640.000 418.943 C 649.368 418.943 658.102 421.587 665.752 426.395 M 965.823 684.513 C 845.596 684.512 748.609 587.525 748.608 467.298 C 748.608 347.071 845.596 250.083 965.823 250.083 C 1086.050 250.083 1183.038 347.071 1183.038 467.298 C 1183.038 587.525 1086.050 684.513 965.823 684.513 M 314.177 684.513 C 193.950 684.513 96.962 587.525 96.962 467.298 C 96.962 347.071 193.950 250.083 314.177 250.083 C 434.404 250.083 531.392 347.071 531.392 467.298 C 531.392 587.525 434.404 684.512 314.177 684.513 M 614.654 426.067 C 558.877 335.330 446.867 153.116 446.850 153.089 C 446.846 153.082 404.464 83.295 404.460 83.288 C 404.467 83.288 476.356 82.336 476.364 82.336 C 476.349 82.334 325.435 60.928 325.420 60.926 C 325.420 60.929 323.941 84.475 323.940 84.477 C 323.949 84.477 404.452 83.288 404.460 83.288 M 591.506 467.016 C 591.606 449.803 600.749 434.655 614.654 426.067 M 591.645 467.298 C 591.645 467.298 591.645 467.298 591.506 467.016 C 591.644 467.298 591.645 467.298 591.645 467.298 \"},children:[]}]}]},{name:\"Bone\",bbox:{x:{min:18.634,max:1261.366},y:{min:213.944,max:506.056}},layers:[{tagName:\"g\",props:{id:\"bone\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 1259.366 302.368 C 1259.366 324.372 1251.201 344.420 1237.462 360.049 C 1251.201 375.582 1259.366 395.629 1259.366 417.633 C 1259.366 465.467 1220.778 504.056 1172.943 504.056 C 1135.154 504.056 1103.135 479.973 1091.443 446.530 C 806.458 446.392 419.658 446.371 188.602 446.401 C 176.866 479.973 144.847 504.056 107.058 504.056 C 59.223 504.056 20.634 465.468 20.634 417.633 C 20.634 395.629 37.062 368.944 42.538 360.049 C 42.538 360.049 20.634 324.372 20.634 302.368 C 20.634 254.533 59.223 215.944 107.058 215.944 C 144.847 215.945 179.062 249.595 188.557 273.471 C 188.160 273.360 900.522 273.525 1091.398 273.599 C 1103.135 240.027 1135.154 215.944 1172.943 215.944 C 1220.778 215.945 1259.366 254.533 1259.366 302.368 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 188.557 273.471 C 190.840 279.697 193.662 288.143 194.209 297.025 M 1091.443 446.530 C 1088.221 437.316 1086.520 427.678 1086.519 417.633 M 1259.366 302.368 C 1259.366 324.372 1251.201 344.420 1237.462 360.049 C 1251.201 375.582 1259.366 395.629 1259.366 417.633 C 1259.366 465.467 1220.778 504.056 1172.943 504.056 C 1135.154 504.056 1103.135 479.973 1091.443 446.530 C 806.458 446.392 419.658 446.371 188.602 446.401 C 191.779 437.316 193.481 427.678 193.481 417.633 M 1172.943 215.944 C 1220.778 215.945 1259.366 254.533 1259.366 302.368 M 1091.398 273.599 C 1103.135 240.027 1135.154 215.944 1172.943 215.944 M 1086.519 302.368 C 1086.519 292.323 1088.221 282.685 1091.398 273.599 C 900.522 273.525 188.160 273.360 188.557 273.471 C 179.062 249.595 144.847 215.945 107.058 215.944 C 59.223 215.944 20.634 254.533 20.634 302.368 C 20.634 324.372 42.538 360.049 42.538 360.049 C 37.062 368.944 20.634 395.629 20.634 417.633 C 20.634 465.468 59.223 504.056 107.058 504.056 C 144.847 504.056 176.866 479.973 188.602 446.401 \"},children:[]}]}]},{name:\"Church\",bbox:{x:{min:70.782,max:668.361},y:{min:10.399,max:698.207}},layers:[{tagName:\"g\",props:{id:\"church\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 163.482 51.439 C 148.473 51.439 125.605 51.439 125.601 51.439 C 125.601 51.441 125.601 65.867 125.601 65.869 C 125.605 65.869 148.473 65.869 163.481 65.869 C 163.470 83.717 163.462 114.235 163.277 139.456 M 177.710 141.071 C 177.881 118.292 177.912 89.418 177.940 65.869 C 187.388 65.869 215.733 65.869 215.737 65.869 C 215.737 65.867 215.737 51.441 215.737 51.439 C 215.733 51.439 190.499 51.439 177.941 51.439 C 177.884 38.409 177.884 13.402 177.884 13.399 C 177.882 13.399 163.456 13.399 163.454 13.399 C 163.454 13.402 163.455 36.377 163.482 51.439 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 614.774 516.471 C 617.384 540.244 614.429 628.943 614.429 628.954 C 614.426 628.954 582.070 629.029 582.067 629.029 C 582.067 629.017 579.685 541.286 581.743 516.471 C 582.550 506.742 589.117 499.955 598.258 499.955 C 607.400 499.955 613.574 505.545 614.774 516.471 M 177.710 141.071 C 207.100 208.700 265.606 343.324 265.615 343.345 C 265.649 343.345 608.905 343.345 608.940 343.345 C 608.945 343.357 662.278 465.407 662.283 465.420 C 662.283 465.443 665.361 694.158 665.361 694.181 C 665.302 694.181 73.841 695.207 73.782 695.207 C 73.782 695.172 73.782 341.370 73.782 341.335 C 73.782 341.335 163.277 139.456 163.277 139.456 M 136.871 342.319 C 136.872 360.772 151.758 375.658 170.211 375.658 C 188.664 375.658 203.550 360.772 203.551 342.319 C 203.551 323.865 188.664 308.979 170.211 308.979 C 151.758 308.979 136.871 323.865 136.871 342.319 M 505.401 516.471 C 506.208 506.742 512.776 499.955 521.917 499.955 C 531.058 499.955 537.233 505.545 538.432 516.471 C 541.043 540.244 538.087 628.943 538.087 628.954 C 538.084 628.954 505.728 629.029 505.724 629.029 C 505.724 629.017 503.342 541.286 505.401 516.471 M 425.385 516.471 C 426.193 506.742 432.760 499.955 441.902 499.955 C 451.043 499.955 457.217 505.545 458.417 516.471 C 461.027 540.244 458.073 628.943 458.073 628.954 C 458.069 628.954 425.713 629.029 425.710 629.029 C 425.709 629.017 423.327 541.286 425.385 516.471 M 346.466 516.471 C 347.273 506.742 353.840 499.955 362.981 499.955 C 372.123 499.955 378.297 505.545 379.497 516.471 C 382.108 540.244 379.152 628.943 379.152 628.954 C 379.148 628.954 346.793 629.029 346.790 629.029 C 346.790 629.017 344.408 541.286 346.466 516.471 M 266.381 516.471 C 267.188 506.742 273.756 499.955 282.897 499.955 C 292.038 499.955 298.213 505.545 299.413 516.471 C 302.023 540.244 299.068 628.943 299.068 628.954 C 299.064 628.954 266.708 629.029 266.705 629.029 C 266.705 629.017 264.323 541.286 266.381 516.471 M 143.280 522.003 C 144.560 506.036 155.382 494.903 170.382 494.903 C 185.382 494.903 195.564 504.069 197.483 522.003 C 201.230 557.021 196.917 687.626 196.917 687.643 C 196.911 687.643 143.817 687.765 143.812 687.765 C 143.812 687.748 140.350 558.556 143.280 522.003 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 163.277 139.456 C 163.462 114.235 163.470 83.717 163.481 65.869 C 148.473 65.869 125.605 65.869 125.601 65.869 C 125.601 65.867 125.601 51.441 125.601 51.439 C 125.605 51.439 148.473 51.439 163.482 51.439 C 163.455 36.377 163.454 13.402 163.454 13.399 C 163.456 13.399 177.882 13.399 177.884 13.399 C 177.884 13.402 177.884 38.409 177.941 51.439 C 190.499 51.439 215.733 51.439 215.737 51.439 C 215.737 51.441 215.737 65.867 215.737 65.869 C 215.733 65.869 187.388 65.869 177.940 65.869 C 177.912 89.418 177.881 118.292 177.710 141.071 C 207.100 208.700 265.606 343.324 265.615 343.345 C 265.649 343.345 608.905 343.345 608.940 343.345 C 608.945 343.357 662.278 465.407 662.283 465.420 C 662.283 465.443 665.361 694.158 665.361 694.181 C 665.302 694.181 73.841 695.207 73.782 695.207 C 73.782 695.172 73.782 341.370 73.782 341.335 C 73.782 341.335 163.277 139.456 163.277 139.456 M 581.743 516.471 C 582.550 506.742 589.117 499.955 598.258 499.955 C 607.400 499.955 613.574 505.545 614.774 516.471 C 617.384 540.244 614.429 628.943 614.429 628.954 C 614.426 628.954 582.070 629.029 582.067 629.029 C 582.067 629.017 579.685 541.286 581.743 516.471 M 136.871 342.319 C 136.872 360.772 151.758 375.658 170.211 375.658 C 188.664 375.658 203.550 360.772 203.551 342.319 C 203.551 323.865 188.664 308.979 170.211 308.979 C 151.758 308.979 136.871 323.865 136.871 342.319 M 505.401 516.471 C 506.208 506.742 512.776 499.955 521.917 499.955 C 531.058 499.955 537.233 505.545 538.432 516.471 C 541.043 540.244 538.087 628.943 538.087 628.954 C 538.084 628.954 505.728 629.029 505.724 629.029 C 505.724 629.017 503.342 541.286 505.401 516.471 M 425.385 516.471 C 426.193 506.742 432.760 499.955 441.902 499.955 C 451.043 499.955 457.217 505.545 458.417 516.471 C 461.027 540.244 458.073 628.943 458.073 628.954 C 458.069 628.954 425.713 629.029 425.710 629.029 C 425.709 629.017 423.327 541.286 425.385 516.471 M 346.466 516.471 C 347.273 506.742 353.840 499.955 362.981 499.955 C 372.123 499.955 378.297 505.545 379.497 516.471 C 382.108 540.244 379.152 628.943 379.152 628.954 C 379.148 628.954 346.793 629.029 346.790 629.029 C 346.790 629.017 344.408 541.286 346.466 516.471 M 266.381 516.471 C 267.188 506.742 273.756 499.955 282.897 499.955 C 292.038 499.955 298.213 505.545 299.413 516.471 C 302.023 540.244 299.068 628.943 299.068 628.954 C 299.064 628.954 266.708 629.029 266.705 629.029 C 266.705 629.017 264.323 541.286 266.381 516.471 M 143.280 522.003 C 144.560 506.036 155.382 494.903 170.382 494.903 C 185.382 494.903 195.564 504.069 197.483 522.003 C 201.230 557.021 196.917 687.626 196.917 687.643 C 196.911 687.643 143.817 687.765 143.812 687.765 C 143.812 687.748 140.350 558.556 143.280 522.003 Z\"},children:[]}]}]},{name:\"Circle\",bbox:{x:{min:14.436,max:705.564},y:{min:14.436,max:705.564}},layers:[{tagName:\"g\",props:{id:\"Circle\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 16.936 C 549.883 16.936 703.064 170.117 703.064 360.000 C 703.064 549.883 549.883 703.064 360.000 703.064 C 170.117 703.064 16.936 549.883 16.936 360.000 C 16.936 170.117 170.117 16.936 360.000 16.936 Z\"},children:[]}]}]},{name:\"Cloud\",bbox:{x:{min:108.551,max:1171.891886517603},y:{min:18.325550619930425,max:703.65334885266}},layers:[{tagName:\"g\",props:{id:\"cloud\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 110.551 493.788 C 110.551 419.164 167.138 358.100 239.401 351.086 C 230.500 331.069 225.295 307.871 225.296 283.426 C 225.296 190.809 300.212 122.209 392.627 116.093 C 443.502 112.726 491.121 127.729 524.194 162.409 C 543.078 74.527 623.643 17.008 715.340 20.474 C 817.702 24.342 907.561 97.983 904.097 202.911 C 918.838 196.413 936.184 191.541 954.386 192.588 C 1024.173 196.601 1087.978 271.035 1058.967 350.866 C 1115.942 369.043 1164.402 416.695 1169.449 479.445 C 1176.553 567.763 1097.107 627.175 1009.369 639.526 C 958.581 646.675 909.339 638.021 878.468 602.173 C 858.534 622.878 831.824 643.278 799.898 643.779 C 779.150 644.105 760.395 634.103 744.319 624.069 C 701.151 690.338 622.359 708.748 540.837 699.367 C 466.366 690.799 399.315 662.959 365.196 600.046 C 336.087 627.322 296.430 639.663 253.980 637.215 C 174.725 632.644 110.551 573.174 110.551 493.788 Z\"},children:[]}]}]},{name:\"Crown 3 mod\",bbox:{x:{min:132.17099894905917,max:1147.829},y:{min:14.314,max:704.924}},layers:[{tagName:\"g\",props:{id:\"crown_3_mod\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 173.131 649.426 C 173.178 649.421 264.791 601.537 640.000 601.538 C 932.154 601.539 1106.822 649.421 1106.869 649.426 C 1106.911 649.461 1040.720 698.924 640.000 698.924 C 239.280 698.924 173.178 649.431 173.131 649.426 C 173.128 649.376 138.164 145.577 138.171 145.527 C 138.181 145.547 428.020 374.074 428.027 374.092 C 428.054 374.061 639.975 20.346 640.000 20.314 C 640.004 20.340 851.971 375.726 851.973 375.747 C 852.005 375.729 1141.800 145.550 1141.829 145.527 C 1141.826 145.577 1106.479 649.105 1106.869 649.426 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"12\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 138.171 145.527 C 138.181 145.547 428.020 374.074 428.027 374.092 C 428.054 374.061 639.975 20.346 640.000 20.314 C 640.004 20.340 851.971 375.726 851.973 375.747 C 852.005 375.729 1141.800 145.550 1141.829 145.527 C 1141.826 145.577 1106.479 649.105 1106.869 649.426 C 1106.911 649.461 1040.720 698.924 640.000 698.924 C 239.280 698.924 173.178 649.431 173.131 649.426 C 173.128 649.376 138.164 145.577 138.171 145.527 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#000000\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 639.589 601.782 C 900.045 602.934 1056.394 637.828 1056.436 637.831 C 1056.472 637.864 996.297 667.941 640.199 666.318 C 283.816 664.693 223.949 634.009 223.907 634.006 C 223.949 634.003 306.268 600.307 639.589 601.782 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"12\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 173.131 649.426 C 173.178 649.421 264.791 601.537 640.000 601.538 C 932.154 601.539 1106.822 649.421 1106.869 649.426 \"},children:[]}]}]},{name:\"Crown_3point\",bbox:{x:{min:135.67099894905917,max:1144.329},y:{min:17.814,max:701.424}},layers:[{tagName:\"g\",props:{id:\"crown_3point\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 173.131 649.426 C 173.178 649.421 264.791 601.537 640.000 601.538 C 932.154 601.539 1106.822 649.421 1106.869 649.426 C 1106.911 649.461 1040.720 698.924 640.000 698.924 C 239.280 698.924 173.178 649.431 173.131 649.426 C 173.128 649.376 138.164 145.577 138.171 145.527 C 138.181 145.547 428.020 374.074 428.027 374.093 C 428.054 374.061 639.975 20.346 640.000 20.314 C 640.004 20.341 851.971 375.726 851.973 375.747 C 852.005 375.729 1141.800 145.550 1141.829 145.527 C 1141.826 145.577 1106.479 649.105 1106.869 649.426 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 138.171 145.527 C 138.181 145.547 428.020 374.074 428.027 374.093 C 428.054 374.061 639.975 20.346 640.000 20.314 C 640.004 20.341 851.971 375.726 851.973 375.747 C 852.005 375.729 1141.800 145.550 1141.829 145.527 C 1141.826 145.577 1106.479 649.105 1106.869 649.426 C 1106.911 649.461 1040.720 698.924 640.000 698.924 C 239.280 698.924 173.178 649.431 173.131 649.426 C 173.128 649.376 138.164 145.577 138.171 145.527 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 173.131 649.426 C 173.178 649.421 264.791 601.537 640.000 601.538 C 932.154 601.539 1106.822 649.421 1106.869 649.426 \"},children:[]}]}]},{name:\"Crown_5point\",bbox:{x:{min:18.278,max:1261.722},y:{min:31.412999999999997,max:622.3759362225157}},layers:[{tagName:\"g\",props:{id:\"crown\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 20.278 202.420 C 20.302 202.441 256.578 406.987 256.601 407.008 C 256.609 406.982 330.132 144.629 330.139 144.602 C 330.157 144.624 502.225 358.064 502.242 358.085 C 502.256 358.053 639.986 33.445 640.000 33.413 C 640.014 33.445 777.744 358.053 777.758 358.085 C 777.775 358.064 949.844 144.624 949.861 144.602 C 949.868 144.629 1023.391 406.982 1023.399 407.008 C 1023.422 406.987 1259.698 202.441 1259.722 202.420 C 1259.712 202.457 1162.438 572.257 1162.428 572.294 C 1162.377 572.299 887.449 619.827 650.973 620.371 C 404.437 620.939 117.626 572.299 117.572 572.294 C 117.562 572.257 20.288 202.457 20.278 202.420 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 117.572 572.294 C 117.625 572.290 428.332 527.149 642.301 527.246 C 854.408 527.341 989.052 557.278 1162.428 572.294 \"},children:[]}]}]},{name:\"Cup\",bbox:{x:{min:92.36053164182772,max:627.6394683581723},y:{min:25.109,max:694.891}},layers:[{tagName:\"g\",props:{id:\"cup\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 96.733 51.462 C 96.759 51.459 183.693 27.609 360.000 27.609 C 536.307 27.609 623.241 51.459 623.267 51.462 C 623.263 51.492 639.241 271.327 577.920 354.039 C 537.755 408.214 410.759 430.271 400.707 447.607 C 393.142 460.654 392.438 585.810 400.707 598.423 C 411.163 614.372 580.007 645.634 577.920 668.903 C 576.499 684.741 427.073 692.391 360.000 692.391 C 292.927 692.391 141.906 684.327 142.080 668.903 C 142.361 644.062 308.837 614.372 319.293 598.423 C 327.562 585.810 326.858 460.654 319.293 447.607 C 309.241 430.271 182.245 408.214 142.080 354.039 C 80.759 271.327 96.737 51.492 96.733 51.462 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 96.733 51.462 C 96.759 51.463 230.740 68.385 360.000 68.385 C 489.260 68.385 535.512 57.103 623.267 51.462 \"},children:[]}]}]},{name:\"Dagger\",bbox:{x:{min:13.899999999999999,max:1266.1},y:{min:178.655,max:541.345}},layers:[{tagName:\"g\",props:{id:\"dagger\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 344.478 249.326 C 344.478 249.337 344.478 359.989 344.478 360.000 C 344.478 360.011 344.478 470.663 344.478 470.674 C 344.551 470.667 1077.604 403.775 1077.678 403.768 C 1077.696 403.764 1263.581 360.004 1263.600 360.000 C 1263.581 359.996 1077.696 316.236 1077.678 316.232 C 1077.604 316.225 344.551 249.333 344.478 249.326 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 344.478 181.155 C 344.478 181.191 344.478 538.809 344.478 538.845 C 344.474 538.845 300.714 538.845 300.710 538.845 C 300.710 538.809 300.710 181.191 300.710 181.155 C 300.714 181.155 344.474 181.155 344.478 181.155 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 138.715 327.265 C 144.158 336.846 147.342 348.042 147.342 360.000 C 147.342 371.958 144.158 383.154 138.715 392.735 C 192.168 392.831 300.694 393.025 300.710 393.025 C 300.710 393.018 300.710 326.982 300.710 326.975 C 300.694 326.975 192.168 327.169 138.715 327.265 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 147.342 360.000 C 147.342 371.958 144.158 383.154 138.715 392.735 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 138.715 327.265 C 144.158 336.846 147.342 348.042 147.342 360.000 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 147.342 360.000 C 147.342 371.958 144.158 383.154 138.715 392.735 C 127.285 412.348 106.150 425.471 81.871 425.471 C 45.633 425.471 16.400 396.238 16.400 360.000 C 16.400 323.762 45.633 294.529 81.871 294.529 C 106.150 294.529 127.285 307.652 138.715 327.265 C 144.158 336.846 147.342 348.042 147.342 360.000 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 344.478 360.000 C 618.056 360.000 891.635 360.000 1165.213 360.000 \"},children:[]}]}]},{name:\"Eye\",bbox:{x:{min:51.369,max:1228.631},y:{min:106.585,max:613.415}},layers:[{tagName:\"g\",props:{id:\"eye\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 640.000 108.585 C 1065.493 108.585 1226.573 359.975 1226.631 360.000 C 1226.573 360.025 1065.493 611.415 640.000 611.415 C 214.507 611.415 53.427 360.025 53.369 360.000 C 53.427 359.975 214.507 108.585 640.000 108.585 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 640.000 152.484 C 754.859 152.484 847.516 245.141 847.516 360.000 C 847.516 474.859 754.859 567.516 640.000 567.516 C 525.141 567.516 432.484 474.859 432.484 360.000 C 432.484 245.141 525.141 152.484 640.000 152.484 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 640.000 228.699 C 712.674 228.699 771.301 287.326 771.301 360.000 C 771.301 432.674 712.674 491.301 640.000 491.301 C 567.326 491.301 508.699 432.674 508.699 360.000 C 508.699 287.326 567.326 228.699 640.000 228.699 Z\"},children:[]}]}]},{name:\"Fire\",bbox:{x:{min:124.67910767842196,max:544.5469696667047},y:{min:23.315,max:701.695464801314}},layers:[{tagName:\"g\",props:{id:\"fire\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 332.178 699.694 C 167.483 700.281 32.099 524.332 212.289 372.995 C 179.416 489.320 215.781 542.164 242.261 522.856 C 296.568 483.257 271.824 345.916 224.277 286.074 C 192.180 245.679 221.141 164.485 263.241 148.202 C 218.812 202.854 257.266 247.527 278.229 295.065 C 278.084 220.172 317.615 224.818 329.181 184.169 C 347.341 120.346 338.421 74.199 302.206 25.315 C 395.173 53.027 396.256 167.665 377.137 262.097 C 369.983 297.428 350.575 350.555 389.125 378.989 C 419.707 401.547 464.288 310.452 437.083 277.084 C 585.113 351.365 353.695 478.275 431.086 528.852 C 486.719 565.208 484.774 468.539 524.001 435.938 C 575.604 570.224 521.978 699.017 332.178 699.694 Z\"},children:[]}]}]},{name:\"Hand\",bbox:{x:{min:58.62957037399087,max:617.8041547144421},y:{min:19.07052601023765,max:693.2746412006549}},layers:[{tagName:\"g\",props:{id:\"hand\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 388.101 691.188 C 349.358 692.554 286.078 677.578 262.694 659.669 C 222.804 629.119 180.830 574.317 172.257 558.936 C 164.888 545.713 129.855 470.795 116.509 446.143 C 101.751 418.880 57.854 376.984 60.768 361.540 C 62.938 350.038 92.296 343.370 104.816 348.918 C 123.556 357.222 143.219 378.598 148.270 382.904 C 168.139 399.841 210.484 481.737 225.022 478.988 C 241.798 475.815 251.286 446.887 257.001 431.020 C 261.697 417.984 260.840 329.738 260.199 315.896 C 259.475 300.252 245.751 198.532 244.344 186.699 C 243.123 176.429 226.926 87.286 231.418 74.455 C 232.885 70.264 238.469 47.619 255.208 46.239 C 269.416 45.067 277.307 58.910 279.386 61.664 C 287.965 73.026 298.740 167.414 301.141 177.977 C 303.569 188.655 319.063 287.525 332.151 293.511 C 334.107 294.405 348.123 291.731 349.740 290.313 C 360.335 281.026 359.383 184.365 360.022 173.664 C 360.755 161.378 355.860 53.181 364.130 39.279 C 365.981 36.168 373.141 20.380 388.096 21.094 C 401.198 21.720 408.779 36.263 410.499 39.279 C 418.329 53.005 413.851 158.554 414.549 170.556 C 415.197 181.687 413.765 282.375 424.890 291.912 C 426.811 293.559 443.443 296.299 445.677 295.110 C 457.079 289.042 463.159 199.157 464.858 189.477 C 466.525 179.982 474.760 95.716 482.452 85.648 C 484.663 82.755 495.288 66.758 508.470 70.186 C 520.827 73.399 527.655 95.851 528.821 100.039 C 532.184 112.117 516.145 193.867 515.405 203.377 C 514.457 215.560 504.090 322.995 512.251 336.828 C 513.433 338.831 525.500 348.629 527.804 348.311 C 540.977 346.495 552.866 251.073 555.005 241.184 C 556.792 232.924 565.508 161.227 571.411 150.331 C 573.020 147.362 585.203 134.748 596.368 137.474 C 606.942 140.055 614.039 158.814 615.165 162.398 C 619.466 176.089 600.704 269.791 599.286 280.618 C 596.564 301.402 578.287 481.375 570.394 507.770 C 564.903 526.132 546.409 615.610 502.088 651.674 C 460.886 685.201 416.365 690.192 388.101 691.188 Z\"},children:[]}]}]},{name:\"Hand_fist\",bbox:{x:{min:73.46967434240203,max:648.48337470385},y:{min:15.957408612174323,max:693.367185203972}},layers:[{tagName:\"g\",props:{id:\"hand_fist\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 359.426 691.365 C 297.053 691.640 193.433 665.927 159.893 632.447 C 118.733 591.360 89.189 527.479 79.934 497.690 C 72.852 474.899 74.139 385.013 84.202 346.726 C 94.017 309.387 146.296 244.907 146.311 244.883 C 146.311 244.874 137.560 213.054 143.578 162.227 C 145.494 146.043 162.719 93.409 169.109 86.175 C 226.041 21.723 289.279 55.226 289.291 55.223 C 289.298 55.219 326.427 16.827 358.792 17.983 C 392.657 19.192 422.156 54.843 422.162 54.847 C 422.171 54.847 475.641 41.019 511.049 60.004 C 534.960 72.825 542.202 112.795 542.205 112.800 C 542.215 112.805 610.450 106.222 640.540 159.745 C 654.262 184.153 641.584 312.494 629.115 379.406 C 622.529 414.752 632.311 561.434 540.543 633.040 C 474.492 684.578 404.031 691.168 359.426 691.365 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 422.162 54.847 C 397.645 94.501 388.560 154.235 384.709 181.533 C 378.443 225.951 382.636 291.627 382.636 291.638 C 369.260 282.072 328.489 229.553 316.513 223.065 C 308.707 218.835 255.857 209.819 255.851 209.817 C 254.816 188.960 256.464 139.296 259.397 129.322 C 263.992 113.696 275.803 74.110 289.291 55.223 M 483.046 365.108 C 483.055 365.110 518.845 414.412 568.049 385.661 C 610.180 361.043 610.364 327.226 622.890 286.243 C 630.049 262.816 636.427 220.894 643.195 188.220 M 542.205 112.800 C 532.537 106.104 517.637 147.020 500.609 218.421 C 487.232 274.513 483.048 365.093 483.046 365.108 M 146.311 244.883 C 189.255 226.988 255.840 209.821 255.851 209.817 M 382.636 291.638 C 397.943 302.585 475.428 318.602 481.588 337.387 C 484.756 347.048 472.025 377.105 460.677 389.407 C 449.542 401.477 417.252 409.874 409.576 411.640 C 375.555 419.465 314.820 405.188 301.820 396.946 C 290.999 390.087 250.889 348.434 250.884 348.430 C 250.883 348.440 265.210 386.036 247.941 448.376 \"},children:[]}]}]},{name:\"Hand_hold_fingers\",bbox:{x:{min:62.48492422324691,max:597.4383398779804},y:{min:11.429352261737737,max:704.2016697002493}},layers:[{tagName:\"g\",props:{id:\"Hand_hold_fingers\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 588.387 367.930 C 587.801 346.546 582.026 264.328 580.481 242.992 C 579.531 229.867 577.071 179.092 574.286 166.231 C 571.089 151.467 554.160 94.358 544.001 83.178 C 539.619 78.356 516.892 60.706 510.624 64.741 C 499.106 72.156 505.424 88.088 505.468 92.996 C 505.575 105.138 520.386 150.076 521.937 162.118 C 523.548 174.622 525.160 223.377 523.528 235.878 C 522.193 246.102 519.711 291.564 507.128 293.946 C 499.409 295.408 493.850 208.039 489.588 190.650 C 486.513 178.105 472.443 130.176 466.674 118.620 C 459.282 103.812 422.128 51.317 409.932 40.129 C 403.894 34.590 376.448 10.163 369.450 14.426 C 357.449 21.738 364.804 47.953 370.541 59.311 C 376.312 70.734 403.498 112.045 408.793 123.696 C 414.315 135.845 430.902 184.754 433.078 197.921 C 435.965 215.385 438.743 301.057 433.343 301.504 C 428.697 301.889 409.407 231.579 403.702 217.459 C 397.242 201.469 371.865 139.608 361.635 125.725 C 348.548 107.966 285.252 48.330 264.597 40.586 C 258.554 38.320 232.400 31.869 226.924 37.911 C 222.890 42.362 234.049 66.378 237.074 71.568 C 245.591 86.178 299.513 125.549 308.977 139.563 C 317.849 152.702 339.226 210.455 343.168 225.811 C 346.605 239.201 357.399 303.083 353.535 306.041 C 347.362 310.766 289.055 243.725 246.623 233.472 C 229.335 229.294 161.814 228.629 142.720 239.519 C 131.785 245.756 95.801 279.146 88.512 289.410 C 83.428 296.571 56.909 321.635 67.431 336.278 C 74.337 345.890 108.182 330.551 115.942 327.254 C 125.242 323.304 154.127 295.439 163.803 292.531 C 176.517 288.709 223.419 287.608 234.467 292.482 C 250.879 299.721 294.735 356.315 302.337 372.562 C 313.082 395.528 333.232 495.257 324.924 519.213 C 319.190 535.749 269.649 587.633 252.645 591.781 C 239.112 595.083 198.679 582.820 174.344 569.103 C 164.807 563.728 141.408 534.761 132.290 520.773 C 111.349 488.646 68.540 504.141 70.443 516.189 C 73.326 534.441 108.575 598.369 121.640 611.436 C 145.744 635.543 267.306 692.947 300.831 699.124 C 336.161 705.633 480.712 700.076 510.139 679.470 C 534.029 662.741 568.796 592.459 586.772 526.964 C 603.733 455.730 589.132 395.097 588.387 367.930 Z\"},children:[]}]}]},{name:\"Hand_open\",bbox:{x:{min:20.02116982498018,max:1249.110832738992},y:{min:26.20882697102383,max:693.248660251993}},layers:[{tagName:\"g\",props:{id:\"Hand_open_3/4\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 22.526 356.190 C 22.137 301.424 45.293 210.825 74.317 181.008 C 150.906 102.323 295.912 44.960 333.960 39.196 C 361.992 34.949 517.083 42.223 569.583 42.855 C 624.308 43.513 727.855 16.601 748.283 35.375 C 763.922 49.748 745.004 101.329 724.234 114.974 C 693.089 135.435 641.055 144.419 629.501 147.899 C 584.042 161.591 392.148 148.243 407.042 170.649 C 419.342 189.151 469.501 185.396 495.628 189.968 C 519.213 194.095 670.041 205.141 693.928 206.792 C 723.647 208.845 918.516 219.808 941.182 219.816 C 960.494 219.823 1128.504 199.314 1151.877 209.210 C 1159.305 212.355 1199.776 225.005 1200.366 255.507 C 1200.866 281.389 1174.841 294.084 1169.609 297.531 C 1147.441 312.135 970.685 322.464 950.522 323.660 C 930.037 324.874 726.371 323.563 726.348 323.563 C 726.371 323.564 932.045 340.064 951.671 338.683 C 973.997 337.111 1167.732 312.898 1195.604 322.298 C 1202.805 324.726 1245.130 328.196 1246.577 359.597 C 1247.978 390.009 1205.441 402.270 1198.314 406.027 C 1173.477 419.118 988.226 434.430 966.974 436.594 C 945.773 438.753 734.802 453.247 734.778 453.249 C 734.801 453.249 943.851 453.938 964.229 451.622 C 981.647 449.642 1134.975 436.219 1155.656 446.376 C 1161.592 449.291 1193.880 462.546 1192.421 487.239 C 1191.052 510.391 1153.353 530.331 1146.347 533.974 C 1126.661 544.213 979.597 550.334 962.795 551.995 C 935.707 554.672 666.940 581.441 666.911 581.444 C 666.931 581.444 849.484 575.820 869.007 576.122 C 887.575 576.409 1015.374 551.736 1041.345 554.509 C 1050.299 555.464 1078.824 569.513 1079.543 591.178 C 1080.194 610.775 1048.899 630.451 1043.191 634.082 C 1020.802 648.324 846.289 671.421 826.221 673.634 C 783.423 678.352 408.545 699.202 356.061 686.938 C 322.139 679.012 159.991 643.521 94.379 563.005 C 33.482 488.275 22.890 407.513 22.526 356.190 Z\"},children:[]}]}]},{name:\"Hand_point\",bbox:{x:{min:106.58456646986261,max:1141.297217988966},y:{min:8.362960028144531,max:703.9559345022922}},layers:[{tagName:\"g\",props:{id:\"hand_point\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 109.224 412.448 C 107.082 351.684 129.895 251.907 158.658 215.758 C 200.786 162.813 258.346 109.773 297.593 97.736 C 335.003 86.262 484.543 88.812 536.795 77.381 C 619.732 59.237 686.413 -0.848 711.895 12.884 C 734.947 25.305 721.677 93.528 699.476 114.639 C 667.731 144.826 610.340 167.779 597.498 173.803 C 567.403 187.920 444.437 206.691 444.422 206.694 C 444.430 206.695 497.655 208.253 519.655 209.212 C 541.075 210.145 676.395 211.722 697.835 211.846 C 724.010 211.998 895.481 210.958 915.397 211.075 C 932.272 211.174 1079.932 203.832 1099.728 213.836 C 1105.944 216.977 1140.026 230.270 1138.763 256.581 C 1137.690 278.915 1114.512 288.291 1109.850 291.039 C 1090.068 302.700 937.168 306.671 919.774 308.324 C 902.446 309.971 730.580 327.071 730.562 327.078 C 730.569 327.086 753.626 369.608 754.633 376.101 C 761.575 420.867 732.023 452.160 733.069 458.238 C 738.957 492.435 755.468 527.335 728.053 555.153 C 710.025 573.446 681.687 569.053 681.680 569.055 C 681.669 569.076 713.450 647.005 630.320 688.726 C 599.576 704.155 429.065 704.249 389.752 695.976 C 346.295 686.830 226.030 658.691 171.198 591.226 C 118.652 526.575 110.786 456.777 109.224 412.448 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 730.562 327.078 C 594.574 330.881 533.075 326.055 517.057 339.744 C 502.361 352.303 504.032 390.611 507.529 415.967 C 510.325 436.239 733.047 458.234 733.069 458.238 C 733.047 458.237 521.026 425.534 509.911 444.550 C 497.344 466.049 484.514 506.499 493.237 532.682 C 498.144 547.413 681.661 569.051 681.680 569.055 C 681.661 569.053 512.965 543.121 495.619 549.356 C 472.294 557.740 466.901 601.113 474.182 620.813 C 480.781 638.668 578.274 666.088 630.320 688.726 C 713.450 647.005 681.669 569.076 681.680 569.055 \"},children:[]}]}]},{name:\"Heart\",bbox:{x:{min:6.789308442707883,max:713.2105289019418},y:{min:20.11183363214805,max:690.023}},layers:[{tagName:\"g\",props:{id:\"heart\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 356.759 688.023 C 356.741 688.006 237.071 577.269 174.675 516.928 C 99.280 444.017 10.676 363.763 8.828 250.266 C 7.366 160.530 47.346 54.584 127.131 31.977 C 302.201 -17.631 356.736 151.094 356.759 151.106 C 356.783 151.094 414.292 -20.121 592.869 31.977 C 672.476 55.201 712.634 160.530 711.172 250.266 C 709.324 363.763 625.209 448.965 545.325 516.928 C 473.985 577.623 356.778 688.006 356.759 688.023 Z\"},children:[]}]}]},{name:\"Leaf veins\",bbox:{x:{min:20.253,max:1259.747},y:{min:58.431,max:661.569}},layers:[{tagName:\"g\",props:{id:\"eye/leaf\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"13\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 1253.247 360.000 C 1253.186 360.030 999.245 655.069 640.000 655.069 C 280.755 655.069 26.814 360.030 26.753 360.000 C 26.814 359.971 280.755 64.931 640.000 64.931 C 999.245 64.931 1253.186 359.971 1253.247 360.000 Z\"},children:[]}]},{tagName:\"g\",props:{id:\"Leaf_veins\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 1080.816 502.160 C 1011.602 454.774 873.195 360.014 873.174 360.000 C 873.196 359.986 1015.754 267.758 1087.043 221.637 M 857.469 616.518 C 759.049 531.012 562.238 360.026 562.209 360.000 C 562.238 359.975 759.049 190.123 857.469 105.184 M 573.067 650.319 C 467.528 553.546 256.480 360.029 256.449 360.000 C 256.479 359.971 461.394 168.065 563.867 72.098 M 1246.316 360.000 C 1180.912 360.000 873.192 360.000 873.174 360.000 C 873.158 360.000 562.224 360.000 562.209 360.000 C 562.194 360.000 256.464 360.000 256.449 360.000 C 256.436 360.000 64.736 360.000 33.685 360.000 \"},children:[]}]}]},{name:\"Leaf\",bbox:{x:{min:154.214,max:565.786},y:{min:12.815999999999999,max:707.184}},layers:[{tagName:\"g\",props:{id:\"Leaf\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 16.816 C 360.020 16.851 561.786 169.976 561.786 360.000 C 561.786 550.024 360.020 703.149 360.000 703.184 C 359.980 703.149 158.214 550.024 158.214 360.000 C 158.214 169.976 359.980 16.851 360.000 16.816 Z\"},children:[]}]},{tagName:\"g\",props:{id:\"Leaf_2\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 448.933 102.434 C 419.289 140.420 360.009 216.381 360.000 216.393 C 359.991 216.381 301.660 139.438 272.489 100.961 M 529.005 230.903 C 472.670 284.737 360.017 392.388 360.000 392.404 C 359.983 392.388 247.330 284.737 190.996 230.903 M 561.786 385.039 C 494.524 445.182 360.020 565.451 360.000 565.469 C 359.980 565.451 227.440 449.110 161.160 390.931 M 360.000 16.816 C 360.000 51.798 360.000 121.750 360.000 121.760 C 360.000 121.770 360.000 216.383 360.000 216.393 C 360.000 216.402 360.000 306.599 360.000 306.608 C 360.000 306.616 360.000 392.395 360.000 392.404 C 360.000 392.412 360.000 478.075 360.000 478.084 C 360.000 478.093 360.000 565.460 360.000 565.469 C 360.000 565.477 360.000 645.586 360.000 645.594 C 360.000 645.600 360.000 683.987 360.000 703.184 \"},children:[]}]}]},{name:\"Lightning\",bbox:{x:{min:155.477,max:564.523},y:{min:10.817,max:709.183}},layers:[{tagName:\"g\",props:{id:\"lightning\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 350.356 48.177 C 350.340 48.210 186.425 379.255 186.408 379.288 C 186.421 379.288 311.768 379.288 311.781 379.288 C 311.765 379.321 157.492 707.151 157.477 707.183 C 157.509 707.142 482.125 292.534 482.158 292.493 C 482.144 292.492 343.941 286.064 343.927 286.064 C 343.949 286.036 562.500 12.842 562.523 12.817 C 562.503 12.818 350.377 48.174 350.356 48.177 Z\"},children:[]}]}]},{name:\"Mosque\",bbox:{x:{min:17.635,max:702.365},y:{min:13.04344248037758,max:703.777}},layers:[{tagName:\"g\",props:{id:\"mosque\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 664.780 173.611 C 674.445 173.888 684.558 167.161 685.192 157.997 C 681.904 163.708 675.870 167.732 668.871 167.732 C 659.053 167.732 651.132 159.813 651.132 149.995 C 651.131 140.176 660.688 132.626 668.871 132.254 C 669.550 132.223 666.151 132.326 664.780 132.326 C 653.355 132.326 644.138 141.544 644.138 152.969 C 644.138 164.394 654.654 173.321 664.780 173.611 M 635.695 250.283 C 645.702 250.440 681.842 250.766 691.046 250.283 C 691.626 250.515 700.618 232.548 700.669 221.637 C 700.773 199.475 663.346 179.059 663.342 179.055 C 663.338 179.059 625.912 199.474 626.013 221.637 C 626.063 232.547 635.695 250.283 635.695 250.283 M 639.554 702.102 C 639.554 702.057 639.554 254.170 639.554 254.125 C 639.558 254.125 684.976 254.125 684.980 254.125 C 684.980 254.170 684.980 702.057 684.980 702.102 C 684.976 702.102 639.558 702.102 639.554 702.102 M 82.108 702.277 C 82.108 702.275 82.108 683.387 82.108 683.385 C 82.164 683.385 637.668 683.385 637.724 683.385 C 637.724 683.387 637.724 702.275 637.724 702.277 C 637.668 702.277 82.164 702.277 82.108 702.277 M 233.075 452.089 C 233.075 452.086 233.075 419.708 233.075 419.705 C 233.101 419.705 486.731 419.705 486.757 419.705 C 486.757 419.708 486.757 452.086 486.757 452.089 C 486.731 452.089 233.101 452.089 233.075 452.089 M 86.280 475.022 C 86.280 475.020 86.280 456.133 86.280 456.131 C 86.335 456.131 633.497 456.131 633.552 456.131 C 633.552 456.133 633.552 475.020 633.552 475.022 C 633.497 475.022 86.335 475.022 86.280 475.022 M 184.975 565.038 C 187.837 538.834 155.338 509.373 155.335 509.368 C 155.332 509.373 123.256 535.458 125.697 565.038 C 127.514 587.053 126.315 668.920 126.316 668.930 C 126.321 668.930 184.387 669.183 184.393 669.183 C 184.393 669.172 182.473 587.941 184.975 565.038 M 287.527 565.038 C 290.390 538.834 257.891 509.373 257.888 509.368 C 257.885 509.373 225.808 535.458 228.249 565.038 C 230.066 587.053 228.868 668.920 228.868 668.930 C 228.874 668.930 286.940 669.183 286.946 669.183 C 286.946 669.172 285.025 587.941 287.527 565.038 M 493.981 565.038 C 496.843 538.834 464.345 509.373 464.342 509.368 C 464.339 509.373 432.263 535.458 434.704 565.038 C 436.520 587.053 435.323 668.920 435.323 668.930 C 435.329 668.930 493.395 669.183 493.400 669.183 C 493.400 669.172 491.479 587.941 493.981 565.038 M 596.533 565.038 C 599.395 538.835 566.897 509.373 566.894 509.368 C 566.891 509.373 534.815 535.458 537.256 565.038 C 539.073 587.053 537.875 668.920 537.875 668.930 C 537.881 668.930 595.945 669.183 595.951 669.183 C 595.951 669.172 594.031 587.941 596.533 565.038 M 330.802 565.038 C 327.940 538.835 360.437 509.373 360.440 509.368 C 360.443 509.373 392.520 535.458 390.079 565.038 C 388.262 587.053 389.460 668.920 389.460 668.930 C 389.454 668.930 331.389 669.183 331.384 669.183 C 331.383 669.172 333.305 587.941 330.802 565.038 M 85.920 677.846 C 85.920 677.826 85.920 479.249 85.920 479.229 C 85.975 479.229 633.857 479.229 633.912 479.229 C 633.912 479.249 633.912 677.826 633.912 677.846 C 633.857 677.846 85.975 677.846 85.920 677.846 M 58.813 173.611 C 68.478 173.888 78.592 167.162 79.225 157.997 C 75.937 163.708 69.903 167.732 62.904 167.732 C 53.086 167.732 45.166 159.813 45.165 149.995 C 45.165 140.176 54.721 132.626 62.904 132.254 C 63.584 132.223 60.184 132.326 58.813 132.326 C 47.387 132.326 38.171 141.544 38.171 152.969 C 38.171 164.394 48.687 173.321 58.813 173.611 M 29.728 250.283 C 39.735 250.440 75.875 250.766 85.078 250.283 C 85.659 250.515 94.652 232.549 94.703 221.637 C 94.807 199.474 57.378 179.059 57.374 179.055 C 57.371 179.059 19.945 199.474 20.046 221.637 C 20.096 232.547 29.728 250.283 29.728 250.283 M 33.587 702.102 C 33.587 702.057 33.587 254.170 33.587 254.125 C 33.592 254.125 79.010 254.125 79.014 254.125 C 79.014 254.170 79.014 702.057 79.014 702.102 C 79.010 702.102 33.592 702.102 33.587 702.102 M 360.309 155.593 C 393.268 156.536 427.757 133.600 429.915 102.346 C 418.704 121.824 398.126 135.547 374.260 135.547 C 340.779 135.547 313.768 108.537 313.768 75.055 C 313.768 41.573 346.357 15.830 374.260 14.563 C 376.578 14.458 364.984 14.810 360.309 14.810 C 321.348 14.809 289.918 46.241 289.918 85.202 C 289.918 124.163 325.779 154.605 360.309 155.593 M 256.587 415.193 C 293.992 415.193 429.038 416.461 463.459 415.193 C 465.377 415.994 499.431 357.631 499.431 321.338 C 499.431 244.118 359.930 181.837 359.916 181.823 C 359.902 181.837 220.402 244.118 220.402 321.338 C 220.402 357.631 256.587 415.193 256.587 415.193 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 353.886 187.690 C 347.646 181.444 359.916 158.887 359.916 158.884 C 359.917 158.887 372.187 181.444 365.947 187.690 C 363.390 190.250 356.443 190.250 353.886 187.690 M 625.102 359.381 C 625.102 359.379 625.102 334.530 625.102 334.528 C 625.109 334.528 700.858 334.528 700.865 334.528 C 700.865 334.530 700.865 359.379 700.865 359.381 C 700.863 359.383 682.534 373.180 682.532 373.181 C 682.528 373.181 643.439 373.181 643.435 373.181 C 643.433 373.180 625.104 359.383 625.102 359.381 M 19.135 359.381 C 19.135 359.379 19.135 334.530 19.135 334.528 C 19.142 334.528 94.891 334.528 94.898 334.528 C 94.898 334.530 94.898 359.379 94.898 359.381 C 94.896 359.383 76.567 373.180 76.565 373.181 C 76.561 373.181 37.472 373.181 37.469 373.181 C 37.467 373.180 19.137 359.383 19.135 359.381 Z\"},children:[]}]}]},{name:\"Pyramid\",bbox:{x:{min:5.590999999999999,max:713.317},y:{min:80.932,max:639.068}},layers:[{tagName:\"g\",props:{id:\"Pyramid\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 327.289 84.432 C 327.315 84.488 589.661 635.513 589.688 635.568 C 589.630 635.568 9.149 635.568 9.091 635.568 C 9.123 635.513 327.257 84.488 327.289 84.432 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 589.688 635.568 C 589.661 635.513 327.315 84.488 327.289 84.432 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 709.817 557.039 C 709.805 557.047 629.731 609.391 589.688 635.568 C 589.661 635.513 327.315 84.488 327.289 84.432 C 454.798 241.968 709.779 556.992 709.817 557.039 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"7\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 327.289 84.432 C 454.798 241.968 709.779 556.992 709.817 557.039 C 709.805 557.047 629.731 609.391 589.688 635.568 C 589.630 635.568 9.149 635.568 9.091 635.568 C 9.123 635.513 327.257 84.488 327.289 84.432 C 327.315 84.488 589.661 635.513 589.688 635.568 \"},children:[]}]}]},{name:\"Skull\",bbox:{x:{min:52.1080497290785,max:665.3429125684244},y:{min:14.547,max:690.344}},layers:[{tagName:\"g\",props:{id:\"skull\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 100.803 300.044 C 100.803 234.772 153.458 182.116 218.730 182.116 C 284.003 182.116 336.658 234.771 336.659 300.044 C 336.659 365.316 284.003 417.972 218.730 417.972 C 153.458 417.972 100.803 365.316 100.803 300.044 M 299.524 473.167 C 299.530 473.157 358.719 365.836 358.725 365.825 C 358.731 365.836 417.921 473.157 417.926 473.167 C 417.915 473.167 299.536 473.167 299.524 473.167 M 379.061 298.069 C 379.061 233.283 431.325 181.020 496.111 181.019 C 560.897 181.019 613.161 233.283 613.161 298.069 C 613.161 362.855 560.897 415.119 496.111 415.119 C 431.325 415.119 379.061 362.855 379.061 298.069 M 197.712 687.844 C 197.712 687.830 199.284 574.345 199.694 544.729 C 120.814 492.492 57.113 404.492 54.680 299.752 C 50.905 137.307 196.236 17.047 358.725 17.047 C 521.214 17.047 666.545 137.307 662.771 299.752 C 660.337 404.493 596.636 492.493 517.756 544.729 C 518.166 574.346 519.738 687.830 519.738 687.844 C 519.733 687.844 468.545 687.844 468.540 687.844 C 468.540 687.837 468.540 614.537 468.540 614.530 C 468.538 614.530 451.647 614.530 451.645 614.530 C 451.645 614.537 451.645 687.837 451.645 687.844 C 451.640 687.844 400.967 687.844 400.961 687.844 C 400.961 687.837 400.961 614.537 400.961 614.530 C 400.960 614.530 384.069 614.530 384.067 614.530 C 384.067 614.537 384.067 687.836 384.067 687.844 C 384.062 687.844 333.388 687.844 333.383 687.844 C 333.383 687.836 333.383 614.537 333.383 614.530 C 333.381 614.530 316.490 614.530 316.489 614.530 C 316.489 614.537 316.489 687.836 316.489 687.844 C 316.484 687.844 265.807 687.844 265.802 687.844 C 265.802 687.836 265.805 614.537 265.805 614.530 C 265.803 614.530 248.912 614.530 248.911 614.530 C 248.911 614.537 248.911 687.837 248.911 687.844 C 248.906 687.844 197.717 687.844 197.712 687.844 Z\"},children:[]}]}]},{name:\"Spiral\",bbox:{x:{min:65.98785855010286,max:699.7469524869355},y:{min:27.016447835414823,max:708.857}},layers:[{tagName:\"g\",props:{id:\"Spiral\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"51\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 357.602 343.913 C 357.603 343.913 357.943 343.658 358.146 343.538 C 358.742 343.188 359.236 342.907 359.898 342.704 C 360.997 342.367 361.947 342.186 363.095 342.268 C 364.771 342.388 366.166 342.772 367.607 343.638 C 369.659 344.870 371.112 346.378 372.259 348.478 C 373.885 351.453 374.495 354.385 374.291 357.769 C 374.006 362.504 372.497 366.441 369.664 370.245 C 365.793 375.443 361.070 378.807 354.940 380.911 C 346.795 383.707 339.031 383.798 330.786 381.310 C 320.141 378.098 311.919 372.203 305.388 363.204 C 297.176 351.889 293.540 339.568 294.229 325.604 C 295.074 308.461 301.319 293.813 313.056 281.289 C 327.159 266.242 344.536 257.814 365.077 255.976 C 389.291 253.809 411.304 260.350 430.483 275.289 C 452.710 292.601 466.041 315.867 469.935 343.770 C 474.379 375.608 466.485 405.373 447.087 431.008 C 425.260 459.851 394.998 477.081 359.105 481.557 C 319.238 486.527 282.011 475.535 250.864 450.159 C 216.681 422.310 197.270 384.296 193.983 340.327 C 190.416 292.615 205.973 248.970 238.193 213.600 C 272.782 175.628 318.245 155.602 369.597 154.488 C 424.156 153.305 472.763 173.480 511.506 211.913 C 552.254 252.335 572.600 303.542 572.465 360.938 C 572.325 420.702 549.719 473.051 507.746 515.595 C 464.483 559.447 410.645 581.880 349.081 584.065 C 286.278 586.295 230.936 565.968 182.766 525.609 C 134.154 484.880 106.040 433.152 95.404 370.631 C 84.793 308.256 95.937 251.283 126.504 195.886 C 156.623 141.301 199.050 104.028 255.711 78.024 C 310.775 52.753 364.631 47.220 424.391 57.199 C 481.561 66.746 527.005 90.029 570.720 128.089 C 611.778 163.836 637.215 203.673 656.015 254.762 C 673.281 301.684 677.138 344.296 672.348 394.064 C 668.071 438.494 655.779 474.096 634.890 513.542 C 616.938 547.440 596.464 571.964 568.514 598.235 C 545.784 619.600 524.245 633.584 496.736 648.296 C 476.287 659.233 458.491 665.617 436.322 672.426 C 422.549 676.657 411.084 678.808 396.906 681.379 C 392.047 682.260 387.765 682.698 383.195 683.357 \"},children:[]}]}]},{name:\"Spiral_double\",bbox:{x:{min:13.995284999265444,max:1263.7427150007345},y:{min:62.881886397436645,max:667.6552666696218}},layers:[{tagName:\"g\",props:{id:\"Spiral_Double\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"49\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 962.299 340.298 C 962.299 340.298 962.542 340.622 962.655 340.814 C 962.988 341.381 963.255 341.851 963.448 342.479 C 963.768 343.525 963.940 344.427 963.863 345.518 C 963.749 347.111 963.383 348.437 962.560 349.806 C 961.389 351.756 959.956 353.137 957.960 354.228 C 955.133 355.774 952.346 356.354 949.129 356.160 C 944.630 355.889 940.888 354.455 937.273 351.762 C 932.333 348.082 929.135 343.594 927.135 337.767 C 924.479 330.026 924.392 322.647 926.757 314.812 C 929.809 304.695 935.412 296.881 943.965 290.673 C 954.718 282.868 966.428 279.413 979.699 280.068 C 995.992 280.871 1009.914 286.806 1021.816 297.961 C 1036.117 311.364 1044.127 327.879 1045.874 347.402 C 1047.933 370.415 1041.717 391.336 1027.519 409.565 C 1011.066 430.689 988.954 443.359 962.435 447.059 C 932.176 451.282 903.887 443.781 879.524 425.344 C 852.111 404.600 835.735 375.839 831.482 341.726 C 826.758 303.836 837.205 268.456 861.322 238.853 C 887.790 206.366 923.919 187.918 965.707 184.794 C 1011.053 181.404 1052.532 196.190 1086.148 226.811 C 1122.237 259.684 1141.270 302.893 1142.329 351.697 C 1143.454 403.551 1124.279 449.747 1087.752 486.568 C 1049.334 525.295 1000.667 544.632 946.117 544.504 C 889.318 544.371 839.565 522.887 799.131 482.995 C 757.453 441.877 736.134 390.709 734.057 332.199 C 731.939 272.511 751.256 219.914 789.614 174.133 C 828.323 127.932 877.486 101.213 936.906 91.104 C 996.188 81.019 1050.334 91.610 1102.984 120.661 C 1154.862 149.286 1190.286 189.609 1215.000 243.460 C 1239.018 295.793 1244.276 346.978 1234.793 403.774 C 1225.720 458.109 1203.591 501.299 1167.419 542.846 C 1133.445 581.867 1095.584 606.043 1047.028 623.910 C 1002.433 640.320 961.934 643.986 914.635 639.433 C 872.409 635.368 838.572 623.686 801.083 603.833 C 768.866 586.772 745.558 567.313 720.589 540.749 C 700.284 519.146 686.995 498.675 673.013 472.532 C 662.618 453.096 656.549 436.183 650.078 415.115 C 646.057 402.024 643.953 391.138 641.570 377.653 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"49\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 641.570 377.653 C 639.608 368.832 638.130 361.706 636.168 352.885 C 633.195 339.517 631.681 328.514 627.660 315.423 C 621.189 294.354 615.120 277.441 604.726 258.006 C 590.743 231.862 577.454 211.391 557.149 189.788 C 532.180 163.224 508.872 143.766 476.655 126.704 C 439.166 106.851 405.329 95.169 363.104 91.104 C 315.804 86.551 275.305 90.217 230.710 106.627 C 182.154 124.494 144.293 148.670 110.319 187.692 C 74.147 229.239 52.018 272.429 42.945 326.764 C 33.462 383.559 38.720 434.744 62.738 487.078 C 87.453 540.929 122.876 581.251 174.754 609.877 C 227.404 638.928 281.550 649.518 340.832 639.433 C 400.252 629.325 449.415 602.605 488.124 556.404 C 526.482 510.623 545.799 458.026 543.681 398.338 C 541.604 339.828 520.285 288.660 478.607 247.542 C 438.173 207.651 388.420 186.167 331.621 186.033 C 277.071 185.905 228.404 205.242 189.987 243.969 C 153.459 280.790 134.284 326.987 135.409 378.840 C 136.468 427.645 155.501 470.853 191.590 503.727 C 225.206 534.348 266.685 549.133 312.031 545.743 C 353.819 542.620 389.948 524.172 416.416 491.684 C 440.533 462.082 450.980 426.701 446.256 388.811 C 442.003 354.698 425.627 325.938 398.215 305.193 C 373.851 286.757 345.562 279.255 315.303 283.478 C 288.784 287.179 266.673 299.849 250.219 320.973 C 236.021 339.201 229.805 360.122 231.864 383.136 C 233.611 402.658 241.621 419.174 255.922 432.577 C 267.824 443.731 281.746 449.666 298.039 450.470 C 311.310 451.124 323.020 447.669 333.773 439.864 C 342.326 433.657 347.929 425.842 350.982 415.726 C 353.346 407.890 353.259 400.511 350.603 392.770 C 348.603 386.944 345.405 382.455 340.465 378.775 C 336.850 376.083 333.109 374.648 328.609 374.377 C 325.392 374.184 322.605 374.764 319.778 376.309 C 317.782 377.400 316.349 378.781 315.178 380.731 C 314.355 382.101 313.989 383.426 313.876 385.020 C 313.798 386.110 313.970 387.013 314.290 388.058 C 314.483 388.686 314.750 389.157 315.083 389.723 C 315.197 389.916 315.321 390.067 315.439 390.240 \"},children:[]}]}]},{name:\"Spiral_triple\",bbox:{x:{min:8.527995459145416,max:712.5184176794254},y:{min:34.44023295893676,max:693.2451303459759}},layers:[{tagName:\"g\",props:{id:\"Spiral_Triple\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"29\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 533.523 499.838 C 533.523 499.838 533.633 500.054 533.680 500.179 C 533.818 500.548 533.926 500.853 533.974 501.244 C 534.055 501.894 534.062 502.445 533.903 503.080 C 533.670 504.008 533.316 504.752 532.689 505.475 C 531.795 506.503 530.806 507.169 529.515 507.605 C 527.686 508.223 525.982 508.275 524.104 507.826 C 521.477 507.198 519.419 505.963 517.566 503.997 C 515.034 501.313 513.614 498.332 513.040 494.686 C 512.278 489.843 512.995 485.480 515.205 481.103 C 518.059 475.452 522.178 471.425 527.869 468.652 C 535.026 465.166 542.294 464.345 550.057 466.112 C 559.585 468.281 567.182 473.231 573.043 481.051 C 580.087 490.446 583.094 501.024 582.094 512.723 C 580.915 526.516 575.070 538.212 564.797 547.490 C 552.892 558.241 538.528 563.416 522.497 562.841 C 504.205 562.185 488.295 554.815 475.839 541.403 C 461.823 526.312 455.154 507.640 456.193 487.071 C 457.348 464.225 467.192 444.437 484.501 429.481 C 503.497 413.066 526.732 405.941 551.712 408.445 C 578.818 411.163 601.753 424.201 618.401 445.765 C 636.273 468.914 643.008 496.387 638.555 525.292 C 633.825 556.003 617.705 581.264 592.324 599.188 C 565.629 618.040 534.904 624.386 502.733 618.636 C 469.235 612.648 442.116 594.796 422.410 567.054 C 402.098 538.459 394.843 506.052 399.704 471.315 C 404.664 435.879 421.533 406.856 448.926 383.836 C 476.571 360.604 508.357 349.954 544.467 350.172 C 580.492 350.389 611.336 362.271 639.378 384.888 C 667.008 407.174 683.713 434.649 692.692 468.992 C 701.418 502.368 699.195 533.114 687.691 565.636 C 676.685 596.750 659.136 619.930 633.472 640.680 C 609.368 660.168 584.515 670.493 554.009 675.983 C 525.991 681.026 501.715 678.975 474.282 671.368 C 449.792 664.577 431.043 654.165 410.990 638.551 C 393.757 625.133 382.030 611.228 370.062 592.958 C 360.329 578.100 354.618 564.640 349.088 547.760 C 344.978 535.212 343.157 524.602 341.531 511.498 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"29\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 350.420 218.223 C 350.420 218.223 350.552 218.020 350.637 217.917 C 350.888 217.613 351.098 217.367 351.412 217.130 C 351.935 216.735 352.408 216.453 353.038 216.273 C 353.958 216.011 354.779 215.945 355.719 216.127 C 357.057 216.387 358.127 216.911 359.151 217.812 C 360.600 219.087 361.498 220.536 362.048 222.387 C 362.817 224.976 362.776 227.376 362.001 229.963 C 360.942 233.498 359.070 236.218 356.200 238.538 C 352.387 241.620 348.250 243.180 343.355 243.455 C 337.034 243.809 331.486 242.256 326.239 238.713 C 319.642 234.258 315.297 228.374 312.946 220.768 C 310.060 211.432 310.549 202.378 314.390 193.392 C 319.005 182.594 326.661 174.700 337.294 169.717 C 349.828 163.842 362.879 163.056 376.050 167.314 C 391.314 172.248 402.978 182.100 410.495 196.271 C 419.073 212.441 420.646 229.904 415.259 247.397 C 409.197 267.080 396.362 282.192 378.028 291.577 C 357.666 302.000 335.607 303.368 314.000 295.856 C 290.287 287.613 272.498 271.053 262.177 248.168 C 250.977 223.335 250.802 196.953 261.152 171.754 C 272.264 144.701 292.689 125.132 319.948 114.536 C 348.909 103.278 378.846 104.607 407.059 117.626 C 436.733 131.318 457.592 154.754 468.697 185.490 C 480.260 217.494 478.360 249.905 464.188 280.842 C 449.579 312.731 425.142 335.217 392.628 348.376 C 359.459 361.799 325.891 361.701 292.258 349.488 C 258.316 337.162 233.200 314.960 215.334 283.580 C 197.510 252.272 192.377 219.619 197.944 184.026 C 203.429 148.955 218.871 120.750 244.123 95.803 C 268.664 71.558 296.402 58.110 330.319 51.811 C 362.767 45.785 391.616 49.394 422.418 61.244 C 451.347 72.374 472.716 88.736 492.724 112.410 C 511.100 134.153 521.461 156.201 528.590 183.762 C 534.954 208.367 535.311 229.810 531.816 254.983 C 528.812 276.617 522.633 293.726 512.795 313.225 C 504.794 329.083 495.992 340.759 484.139 353.988 C 475.327 363.822 467.049 370.704 456.514 378.664 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"29\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 197.109 517.897 C 197.109 517.897 196.867 517.884 196.735 517.862 C 196.347 517.796 196.028 517.738 195.665 517.584 C 195.062 517.329 194.582 517.060 194.111 516.605 C 193.424 515.939 192.956 515.261 192.645 514.356 C 192.201 513.068 192.119 511.878 192.387 510.542 C 192.767 508.649 193.573 507.147 194.901 505.745 C 196.758 503.784 198.857 502.620 201.485 501.997 C 205.077 501.147 208.368 501.408 211.812 502.734 C 216.387 504.496 219.807 507.298 222.493 511.400 C 225.960 516.697 227.389 522.278 226.944 528.593 C 226.385 536.534 223.461 543.238 218.050 549.077 C 211.407 556.245 203.322 560.349 193.619 561.516 C 181.961 562.918 171.297 560.234 161.665 553.518 C 150.310 545.600 143.103 534.691 140.205 521.155 C 136.846 505.470 139.546 490.442 148.060 476.846 C 157.774 461.333 172.111 451.240 189.955 447.158 C 210.032 442.566 229.537 446.126 246.831 457.310 C 266.039 469.733 278.253 488.153 282.551 510.621 C 287.268 535.279 281.822 558.964 267.163 579.345 C 251.257 601.461 228.498 614.804 201.499 618.439 C 172.515 622.343 145.355 614.439 122.549 596.130 C 98.318 576.678 84.502 550.088 81.669 519.144 C 78.690 486.600 88.557 456.818 109.623 431.832 C 131.557 405.816 160.576 391.257 194.455 388.062 C 229.375 384.769 261.068 394.689 288.720 416.268 C 316.930 438.281 333.629 467.401 339.868 502.635 C 346.165 538.192 339.495 571.044 321.252 602.206 C 303.051 633.297 277.339 654.068 243.732 667.044 C 210.617 679.829 178.469 680.559 144.238 671.164 C 110.971 662.033 85.456 644.735 63.042 618.511 C 41.600 593.423 30.300 566.635 25.162 534.034 C 20.337 503.416 23.822 476.730 34.320 447.565 C 43.962 420.780 57.876 400.782 78.180 380.827 C 96.306 363.014 114.698 351.983 138.246 342.424 C 158.483 334.208 176.389 331.004 198.195 329.775 C 215.929 328.775 230.442 330.560 247.825 334.211 C 260.747 336.925 270.846 340.653 283.008 345.796 \"},children:[]}]}]},{name:\"Square\",bbox:{x:{min:30.445,max:689.555},y:{min:30.445,max:689.555}},layers:[{tagName:\"g\",props:{id:\"square\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"10\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 35.445 35.445 C 35.510 35.445 684.490 35.445 684.555 35.445 C 684.555 35.510 684.555 684.490 684.555 684.555 C 684.490 684.555 35.510 684.555 35.445 684.555 C 35.445 684.490 35.445 35.510 35.445 35.445 Z\"},children:[]}]}]},{name:\"Sword\",bbox:{x:{min:6.539,max:1273.461},y:{min:234.6,max:485.4}},layers:[{tagName:\"g\",props:{id:\"sword_2\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 234.491 313.177 C 234.491 313.181 234.491 359.995 234.491 360.000 C 234.491 360.005 234.491 406.819 234.491 406.823 C 234.583 406.823 1159.219 404.040 1159.312 404.040 C 1159.323 404.035 1270.950 360.004 1270.961 360.000 C 1270.950 359.996 1159.323 315.965 1159.312 315.961 C 1159.219 315.960 234.583 313.177 234.491 313.177 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 234.491 237.100 C 234.491 237.125 234.491 482.875 234.491 482.900 C 234.488 482.900 204.416 482.900 204.413 482.900 C 204.413 482.875 204.413 237.125 204.413 237.100 C 204.416 237.100 234.488 237.100 234.491 237.100 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 93.092 337.505 C 96.833 344.089 99.021 351.782 99.021 360.000 C 99.021 368.218 96.832 375.911 93.092 382.495 C 129.824 382.561 204.402 382.695 204.413 382.694 C 204.413 382.690 204.413 337.310 204.413 337.306 C 204.402 337.306 129.825 337.439 93.092 337.505 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 99.021 360.000 C 99.021 368.218 96.832 375.911 93.092 382.495 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 93.092 337.505 C 96.833 344.089 99.021 351.782 99.021 360.000 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 99.021 360.000 C 99.021 368.218 96.832 375.911 93.092 382.495 C 85.237 395.972 70.714 404.990 54.030 404.991 C 29.128 404.991 9.039 384.902 9.039 360.000 C 9.039 335.098 29.128 315.009 54.030 315.009 C 70.715 315.009 85.238 324.027 93.092 337.505 C 96.833 344.089 99.021 351.782 99.021 360.000 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 234.491 360.000 C 557.444 360.000 880.398 360.000 1203.351 360.000 \"},children:[]}]}]},{name:\"Synagogue\",bbox:{x:{min:67.793,max:652.24},y:{min:8.929,max:710.726}},layers:[{tagName:\"g\",props:{id:\"synagogue\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 333.946 405.264 C 338.349 397.654 343.170 389.308 347.711 381.418 C 356.096 381.418 365.074 381.418 373.354 381.418 C 377.833 389.173 382.677 397.563 387.150 405.244 C 382.686 412.976 377.813 421.417 373.360 429.129 C 365.092 429.134 356.111 429.136 347.734 429.148 C 343.327 421.515 338.500 413.153 333.946 405.264 M 342.296 439.465 C 348.240 449.762 360.540 471.066 360.542 471.069 C 360.544 471.066 371.091 452.796 378.866 439.330 C 392.065 439.362 418.203 439.362 418.207 439.362 C 418.205 439.358 407.176 420.256 398.569 405.204 C 405.136 393.830 418.205 371.195 418.207 371.192 C 418.203 371.192 392.065 371.192 378.768 371.192 C 372.843 360.792 360.544 339.488 360.542 339.485 C 360.540 339.488 350.215 357.371 342.198 371.192 C 325.583 371.192 302.881 371.192 302.877 371.192 C 302.879 371.195 314.296 390.969 322.581 405.320 C 315.948 416.723 302.879 439.358 302.877 439.362 C 302.881 439.362 325.476 439.362 342.296 439.465 M 360.542 359.222 C 360.542 359.223 364.569 366.197 367.441 371.172 C 362.971 371.183 358.327 371.188 353.633 371.189 C 355.967 367.146 360.541 359.223 360.542 359.222 M 384.674 381.418 C 387.325 385.981 390.110 390.784 392.839 395.390 C 395.524 390.739 400.906 381.419 400.907 381.418 C 400.905 381.418 390.143 381.418 384.674 381.418 M 400.907 429.136 C 400.905 429.136 390.143 429.136 384.773 429.136 C 387.489 424.411 390.193 419.718 392.839 415.163 C 395.524 419.814 400.906 429.135 400.907 429.136 M 367.441 439.381 C 363.125 439.378 358.600 439.375 353.680 439.446 C 355.967 443.407 360.541 451.329 360.542 451.331 C 360.542 451.329 364.569 444.356 367.441 439.381 M 328.232 415.184 C 330.991 419.920 333.697 424.587 336.282 429.136 C 329.270 429.136 320.178 429.136 320.177 429.136 C 320.178 429.135 324.712 421.281 328.232 415.184 M 320.177 381.418 C 320.178 381.419 324.894 389.588 328.272 395.438 C 330.907 390.861 333.699 386.015 336.276 381.418 C 329.270 381.418 320.178 381.418 320.177 381.418 M 550.229 279.119 C 550.229 284.046 554.204 288.020 559.131 288.020 C 564.058 288.020 568.032 284.046 568.032 279.119 C 568.032 274.192 564.058 270.217 559.131 270.217 C 554.204 270.217 550.229 274.192 550.229 279.119 M 153.267 279.119 C 153.267 284.046 157.241 288.020 162.168 288.020 C 167.095 288.020 171.069 284.046 171.069 279.119 C 171.069 274.192 167.095 270.217 162.168 270.217 C 157.241 270.217 153.267 274.192 153.267 279.119 M 159.682 493.793 C 159.682 493.793 156.619 488.488 154.361 484.578 C 150.529 484.588 142.941 484.588 142.940 484.588 C 142.940 484.587 146.255 478.846 148.641 474.670 C 146.734 471.367 142.940 464.795 142.940 464.794 C 142.941 464.794 150.529 464.794 154.390 464.794 C 156.110 461.775 159.682 455.590 159.682 455.589 C 159.683 455.590 162.745 460.894 165.008 464.794 C 169.833 464.794 176.424 464.794 176.425 464.794 C 176.425 464.795 173.110 470.537 170.710 474.695 C 172.631 478.015 176.425 484.587 176.425 484.588 C 176.424 484.588 169.833 484.588 165.004 484.577 C 163.254 487.607 159.683 493.793 159.682 493.793 M 184.433 345.632 C 184.433 345.629 184.433 316.032 184.433 316.029 C 184.428 316.029 137.142 316.029 137.137 316.029 C 137.137 316.032 137.137 345.629 137.137 345.632 C 137.139 345.630 160.560 324.167 160.562 324.164 C 160.565 324.167 184.431 345.630 184.433 345.632 M 186.592 314.797 C 186.592 300.691 175.213 289.312 161.107 289.312 C 147.001 289.312 135.621 300.691 135.622 314.797 C 142.297 314.720 181.273 314.691 186.592 314.797 M 186.905 474.754 C 186.905 489.803 174.765 501.944 159.716 501.944 C 144.667 501.944 132.528 489.803 132.528 474.754 C 132.528 459.706 144.667 447.566 159.716 447.566 C 174.765 447.566 186.905 459.706 186.905 474.754 M 197.969 473.282 C 197.218 451.245 181.312 435.977 160.664 435.977 C 140.015 435.977 125.132 448.517 123.358 473.282 C 122.215 489.229 123.261 548.469 123.261 548.476 C 123.268 548.476 196.354 548.645 196.361 548.645 C 196.361 548.637 198.536 489.948 197.969 473.282 M 251.412 407.971 C 251.403 407.963 160.361 327.473 160.352 327.465 C 160.343 327.473 69.302 407.963 69.293 407.971 C 69.311 407.971 251.394 407.971 251.412 407.971 M 248.487 707.733 C 248.487 707.703 248.487 411.645 248.487 411.615 C 248.469 411.615 69.830 411.615 69.812 411.615 C 69.812 411.645 69.812 707.703 69.812 707.733 C 69.830 707.733 248.469 707.733 248.487 707.733 M 197.969 624.806 C 197.218 602.769 181.312 587.501 160.664 587.501 C 140.015 587.500 125.132 600.041 123.358 624.806 C 122.215 640.753 123.261 699.993 123.261 700.000 C 123.268 700.000 196.354 700.169 196.361 700.169 C 196.361 700.161 198.536 641.472 197.969 624.806 M 560.351 493.793 C 560.351 493.793 563.414 488.488 565.672 484.578 C 569.504 484.588 577.092 484.588 577.093 484.588 C 577.093 484.587 573.778 478.846 571.392 474.670 C 573.299 471.367 577.093 464.795 577.093 464.794 C 577.092 464.794 569.503 464.794 565.643 464.794 C 563.922 461.775 560.351 455.590 560.351 455.589 C 560.350 455.590 557.287 460.894 555.024 464.794 C 550.200 464.794 543.609 464.794 543.607 464.794 C 543.608 464.795 546.923 470.537 549.323 474.695 C 547.402 478.015 543.608 484.587 543.607 484.588 C 543.609 484.588 550.200 484.588 555.028 484.577 C 556.778 487.607 560.350 493.793 560.351 493.793 M 359.999 111.934 C 360.000 111.932 368.137 97.839 374.135 87.451 C 384.316 87.476 404.478 87.476 404.481 87.476 C 404.479 87.473 395.673 72.219 389.334 61.126 C 394.399 52.352 404.479 34.891 404.481 34.889 C 404.478 34.889 384.316 34.889 374.059 34.889 C 369.489 26.866 360.000 10.432 359.999 10.429 C 359.998 10.432 351.860 24.525 345.847 34.889 C 333.031 34.889 315.519 34.889 315.516 34.889 C 315.518 34.891 324.324 50.145 330.702 61.192 C 325.599 70.012 315.518 87.473 315.516 87.476 C 315.519 87.476 333.031 87.476 345.859 87.447 C 350.508 95.499 359.998 111.932 359.999 111.934 M 346.801 129.666 C 346.801 137.144 352.834 143.177 360.312 143.177 C 367.790 143.177 373.822 137.144 373.822 129.666 C 373.822 122.188 367.790 116.155 360.312 116.155 C 352.834 116.155 346.801 122.188 346.801 129.666 M 535.600 345.632 C 535.600 345.629 535.600 316.032 535.600 316.029 C 535.604 316.029 582.891 316.029 582.896 316.029 C 582.896 316.032 582.896 345.629 582.896 345.632 C 582.893 345.630 559.473 324.167 559.470 324.164 C 559.468 324.167 535.602 345.630 535.600 345.632 M 533.441 314.797 C 533.441 300.691 544.820 289.312 558.926 289.312 C 573.032 289.312 584.411 300.691 584.411 314.797 C 577.736 314.720 538.760 314.691 533.441 314.797 M 533.128 474.754 C 533.128 489.803 545.268 501.944 560.317 501.944 C 575.366 501.944 587.505 489.803 587.505 474.754 C 587.505 459.706 575.366 447.566 560.317 447.566 C 545.268 447.566 533.128 459.706 533.128 474.754 M 522.064 473.282 C 522.815 451.245 538.721 435.977 559.369 435.977 C 580.017 435.977 594.901 448.517 596.675 473.282 C 597.817 489.229 596.772 548.469 596.772 548.476 C 596.764 548.476 523.679 548.645 523.672 548.645 C 523.672 548.637 521.496 489.948 522.064 473.282 M 468.621 407.971 C 468.630 407.963 559.671 327.473 559.680 327.465 C 559.690 327.473 650.731 407.963 650.740 407.971 C 650.722 407.971 468.639 407.971 468.621 407.971 M 471.546 707.733 C 471.546 707.703 471.546 411.645 471.546 411.615 C 471.563 411.615 650.203 411.615 650.221 411.615 C 650.221 411.645 650.221 707.703 650.221 707.733 C 650.203 707.733 471.563 707.733 471.546 707.733 M 290.243 405.561 C 290.243 444.344 321.529 475.631 360.312 475.630 C 399.095 475.630 430.381 444.344 430.380 405.561 C 430.380 366.779 399.094 335.493 360.312 335.493 C 321.529 335.493 290.243 366.779 290.243 405.561 M 522.064 624.806 C 522.815 602.769 538.721 587.501 559.369 587.501 C 580.018 587.500 594.901 600.041 596.675 624.806 C 597.817 640.753 596.772 699.993 596.772 700.000 C 596.764 700.000 523.679 700.169 523.672 700.169 C 523.672 700.161 521.496 641.472 522.064 624.806 M 308.826 593.560 C 310.068 563.018 331.917 541.845 360.542 541.845 C 389.166 541.845 409.954 559.219 412.258 593.560 C 413.775 616.188 411.178 700.205 411.178 700.216 C 411.168 700.216 309.850 700.449 309.840 700.449 C 309.840 700.439 307.865 617.188 308.826 593.560 M 256.522 709.226 C 256.522 709.183 256.522 275.974 256.522 275.930 C 256.543 275.930 464.541 275.930 464.562 275.930 C 464.562 275.974 464.562 709.183 464.562 709.226 C 464.541 709.226 256.543 709.226 256.522 709.226 M 245.761 271.889 C 245.761 271.887 245.761 254.114 245.761 254.112 C 245.784 254.112 475.299 254.112 475.322 254.112 C 475.322 254.114 475.322 271.887 475.322 271.889 C 475.299 271.889 245.784 271.889 245.761 271.889 M 258.305 249.871 C 258.305 193.284 303.955 147.635 360.542 147.635 C 417.129 147.635 462.778 193.284 462.779 249.871 C 436.001 249.559 279.643 249.444 258.305 249.871 Z\"},children:[]}]}]},{name:\"Teardrop\",bbox:{x:{min:210.67155018328572,max:511.51838204517594},y:{min:17.719,max:706.9166106416347}},layers:[{tagName:\"g\",props:{id:\"teardrop\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 19.719 C 360.011 19.756 378.033 178.144 472.856 390.284 C 562.720 591.329 472.830 705.411 360.000 704.915 C 259.331 704.472 157.629 599.108 247.144 390.284 C 337.920 178.519 359.989 19.756 360.000 19.719 Z\"},children:[]}]}]},{name:\"Triangle\",bbox:{x:{min:249.846,max:1030.155},y:{min:21.58,max:698.42}},layers:[{tagName:\"g\",props:{id:\"triangle\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 640.000 25.580 C 640.039 25.647 1026.116 694.353 1026.155 694.420 C 1026.077 694.420 253.923 694.420 253.846 694.420 C 253.884 694.353 639.961 25.647 640.000 25.580 Z\"},children:[]}]}]},{name:\"Wing\",bbox:{x:{min:32.10055555555556,max:574.0188793966414},y:{min:44.09621610421311,max:646.2773138153447}},layers:[{tagName:\"g\",props:{id:\"wingR\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 34.101 521.044 C 34.113 521.034 114.448 490.726 159.159 425.665 C 220.665 336.167 165.862 290.519 201.307 237.112 C 222.049 205.859 272.768 194.075 346.636 152.107 C 471.542 81.142 558.220 33.167 569.938 49.191 C 580.969 64.274 546.247 131.326 510.489 158.668 C 471.516 188.470 392.768 219.850 392.756 219.856 C 392.769 219.853 514.070 174.256 523.850 191.825 C 530.757 204.234 503.137 247.818 470.795 270.236 C 443.016 289.492 373.942 311.210 373.932 311.214 C 373.944 311.213 491.514 285.350 498.193 302.797 C 502.987 315.320 469.087 358.484 437.711 368.628 C 384.300 385.896 335.189 394.085 335.179 394.087 C 335.190 394.089 444.137 391.531 448.075 408.136 C 450.831 419.761 421.768 456.367 389.351 461.954 C 355.779 467.739 296.751 465.546 296.742 465.546 C 296.752 465.549 390.793 472.992 399.956 493.858 C 403.148 501.127 383.160 524.509 341.077 536.559 C 294.757 549.822 258.990 527.706 258.982 527.705 C 258.988 527.710 329.068 562.628 325.530 574.288 C 321.025 589.135 290.282 597.602 256.763 594.254 C 232.225 591.803 185.785 565.420 185.778 565.417 C 185.785 565.423 268.211 611.526 252.327 629.745 C 245.098 638.037 198.607 636.080 179.123 625.309 C 165.586 617.826 114.801 580.949 114.795 580.944 C 114.797 580.951 152.749 640.914 141.414 643.055 C 112.554 648.506 87.957 634.897 68.210 618.654 C 55.404 608.121 34.104 572.068 34.101 572.063 C 34.100 572.058 34.101 521.049 34.101 521.044 Z\"},children:[]}]}]},{name:\"arm arrows\",bbox:{x:{min:211.03820821604717,max:458.96691252046475},y:{min:12.196667788829789,max:715.8535230181885}},layers:[{tagName:\"g\",props:{id:\"arm\"},children:[{tagName:\"g\",props:{id:\"arm\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 356.921 308.627 C 339.898 309.228 312.094 302.648 301.820 294.779 C 284.294 281.356 265.851 257.278 262.085 250.520 C 258.847 244.710 243.454 211.793 237.591 200.962 C 231.106 188.983 211.819 170.575 213.099 163.789 C 214.053 158.736 226.952 155.806 232.453 158.244 C 240.687 161.892 249.326 171.284 251.545 173.176 C 260.276 180.618 278.881 216.601 285.268 215.393 C 292.639 213.999 296.808 201.289 299.319 194.317 C 301.382 188.589 301.005 149.816 300.724 143.735 C 300.406 136.861 294.376 92.168 293.758 86.969 C 293.221 82.457 286.105 43.290 288.078 37.652 C 288.723 35.811 291.177 25.861 298.531 25.255 C 304.774 24.740 308.241 30.822 309.154 32.032 C 312.924 37.024 317.658 78.496 318.713 83.137 C 319.779 87.828 326.587 131.269 332.338 133.899 C 333.197 134.292 339.355 133.117 340.066 132.494 C 344.721 128.414 344.303 85.943 344.583 81.242 C 344.906 75.844 342.755 28.305 346.388 22.197 C 347.201 20.830 350.347 13.893 356.918 14.207 C 362.675 14.482 366.006 20.872 366.762 22.197 C 370.202 28.228 368.234 74.603 368.541 79.876 C 368.826 84.767 368.196 129.007 373.085 133.197 C 373.929 133.920 381.236 135.124 382.218 134.602 C 387.228 131.935 389.899 92.443 390.645 88.190 C 391.377 84.018 394.996 46.994 398.375 42.570 C 399.347 41.299 404.016 34.270 409.807 35.777 C 415.237 37.189 418.237 47.053 418.749 48.893 C 420.227 54.200 413.180 90.118 412.854 94.297 C 412.438 99.650 407.883 146.854 411.468 152.931 C 411.988 153.812 417.289 158.117 418.302 157.977 C 424.090 157.179 429.314 115.254 430.254 110.909 C 431.039 107.279 434.868 75.777 437.462 70.990 C 438.169 69.685 443.522 64.143 448.427 65.341 C 453.073 66.475 456.191 74.717 456.686 76.292 C 458.576 82.308 450.333 123.478 449.709 128.235 C 448.513 137.367 440.483 216.442 437.015 228.039 C 434.602 236.106 426.477 275.420 407.003 291.266 C 388.900 305.997 369.339 308.190 356.921 308.627 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 398.207 293.251 C 370.469 293.318 342.731 293.385 314.993 293.452 C 314.940 322.636 302.710 619.761 305.474 689.160 C 306.768 721.647 411.825 722.289 413.846 689.840 C 416.132 653.140 397.592 321.366 398.207 293.251 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 398.207 293.251 C 397.592 321.366 416.132 653.140 413.846 689.840 C 411.825 722.289 306.768 721.647 305.474 689.160 C 302.710 619.761 314.940 322.636 314.993 293.452 \"},children:[]}]}]}],specs:{nesting:[{x:{min:309.05,max:415.163},y:{min:162.051,max:268.164}}],tail:[{point:{x:359.564,y:667.029,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:355.109,y:15.276,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:449.445,y:67.881,t:0},normal:{x:.2540577608524646,y:-.9671890477826101}},{point:{x:296.99,y:29.146,t:0},normal:{x:-.21242144447155675,y:-.9771781464649204}}],arm:[{point:{x:400.344,y:426.228,t:0},normal:{x:.9646564013476496,y:-.2635109624645673}},{point:{x:314.112,y:427.206,t:0},normal:{x:-.9845161967421298,y:-.17529363466028133}}],leg:[{point:{x:312.445,y:696.551,t:0},normal:{x:-.5860442215265754,y:.8102790694663847}},{point:{x:404.98,y:696.14,t:0},normal:{x:.5860442215265728,y:.8102790694663866}}]}},{name:\"bone arrows\",bbox:{x:{min:11.228,max:708.772},y:{min:278.113,max:441.887}},layers:[{tagName:\"g\",props:{id:\"bone\"},children:[{tagName:\"g\",props:{id:\"bone\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 707.772 327.640 C 707.772 339.995 703.188 351.252 695.473 360.028 C 703.188 368.749 707.772 380.006 707.772 392.361 C 707.772 419.220 686.105 440.887 659.246 440.887 C 638.027 440.887 620.049 427.364 613.484 408.586 C 453.466 408.509 236.278 408.497 106.541 408.514 C 99.951 427.364 81.973 440.887 60.755 440.887 C 33.896 440.887 12.228 419.220 12.228 392.361 C 12.228 380.005 21.452 365.022 24.527 360.028 C 24.527 360.028 12.228 339.995 12.228 327.640 C 12.228 300.781 33.895 279.113 60.755 279.113 C 81.973 279.113 101.185 298.008 106.516 311.414 C 106.293 311.352 506.282 311.445 613.459 311.486 C 620.049 292.636 638.027 279.113 659.246 279.113 C 686.105 279.113 707.772 300.781 707.772 327.640 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 106.516 311.414 C 107.798 314.910 109.383 319.653 109.689 324.640 M 613.484 408.586 C 611.675 403.413 610.719 398.001 610.719 392.361 M 707.772 327.640 C 707.772 339.995 703.188 351.252 695.473 360.028 C 703.188 368.749 707.772 380.006 707.772 392.361 C 707.772 419.220 686.105 440.887 659.246 440.887 C 638.027 440.887 620.049 427.364 613.484 408.586 C 453.466 408.509 236.278 408.497 106.541 408.514 C 108.325 403.413 109.281 398.001 109.281 392.361 M 659.246 279.113 C 686.105 279.113 707.772 300.781 707.772 327.640 M 613.459 311.486 C 620.049 292.636 638.027 279.113 659.246 279.113 M 610.719 327.640 C 610.719 321.999 611.675 316.588 613.459 311.486 C 506.282 311.445 106.293 311.352 106.516 311.414 C 101.185 298.008 81.973 279.113 60.755 279.113 C 33.895 279.113 12.228 300.781 12.228 327.640 C 12.228 339.995 24.527 360.028 24.527 360.028 C 21.452 365.022 12.228 380.005 12.228 392.361 C 12.228 419.220 33.896 440.887 60.755 440.887 C 81.973 440.887 99.951 427.364 106.541 408.514 \"},children:[]}]}]}],specs:{nesting:[{x:{min:115.056,max:604.944},y:{min:318.514,max:401.486}}],tail:[{point:{x:69.964,y:360,t:0},normal:{x:1,y:0}}],crown:[{point:{x:360,y:279.402,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:23.582,y:360.615,t:0},normal:{x:-.999987674520136,y:.004964957986782747}},{point:{x:697.827,y:360.615,t:0},normal:{x:.999987674520136,y:.004964957986782766}}],leg:[{point:{x:207.631,y:408,t:0},normal:{x:-.41188905377792084,y:.9112340025360824}},{point:{x:513.094,y:407.942,t:0},normal:{x:.4301175239139053,y:.9027729036818568}}],horn:[{point:{x:512.868,y:310.323,t:0},normal:{x:.3281179739388541,y:-.9446367530316938}},{point:{x:207.712,y:310.461,t:0},normal:{x:-.3903209013842918,y:-.9206788766679477}}]}},{name:\"church arrows\",bbox:{x:{min:112.636,max:623.742},y:{min:60.977,max:649.276}},layers:[{tagName:\"g\",props:{id:\"church\"},children:[{tagName:\"g\",props:{id:\"church\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 191.876 96.021 C 179.035 96.021 159.471 96.021 159.468 96.021 C 159.468 96.022 159.468 108.365 159.468 108.366 C 159.471 108.366 179.035 108.366 191.875 108.366 C 191.865 123.636 191.858 149.744 191.700 171.321 M 204.048 172.702 C 204.195 153.215 204.220 128.512 204.244 108.366 C 212.328 108.366 236.577 108.366 236.580 108.366 C 236.580 108.365 236.580 96.022 236.580 96.021 C 236.577 96.021 214.989 96.021 204.246 96.021 C 204.197 84.874 204.196 63.480 204.196 63.477 C 204.195 63.477 191.853 63.477 191.852 63.477 C 191.852 63.480 191.852 83.135 191.876 96.021 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 577.963 493.864 C 580.196 514.202 577.669 590.085 577.669 590.095 C 577.666 590.095 549.985 590.159 549.982 590.159 C 549.982 590.149 547.945 515.093 549.705 493.864 C 550.395 485.541 556.014 479.734 563.834 479.734 C 571.655 479.734 576.937 484.516 577.963 493.864 M 204.048 172.702 C 229.192 230.560 279.244 345.734 279.252 345.751 C 279.281 345.751 572.943 345.751 572.972 345.751 C 572.977 345.762 618.604 450.178 618.608 450.189 C 618.609 450.208 621.242 645.878 621.242 645.898 C 621.191 645.898 115.186 646.775 115.136 646.776 C 115.136 646.745 115.136 344.062 115.136 344.032 C 115.136 344.032 191.700 171.321 191.700 171.321 M 169.110 344.874 C 169.110 360.661 181.845 373.396 197.632 373.396 C 213.419 373.396 226.155 360.661 226.155 344.874 C 226.155 329.086 213.420 316.351 197.632 316.351 C 181.845 316.351 169.110 329.086 169.110 344.874 M 484.393 493.864 C 485.083 485.541 490.702 479.734 498.523 479.734 C 506.343 479.734 511.625 484.516 512.652 493.864 C 514.885 514.202 512.357 590.085 512.357 590.095 C 512.354 590.095 484.672 590.159 484.670 590.159 C 484.670 590.149 482.632 515.093 484.393 493.864 M 415.938 493.864 C 416.629 485.541 422.248 479.734 430.068 479.734 C 437.889 479.734 443.171 484.516 444.197 493.864 C 446.431 514.202 443.903 590.085 443.903 590.095 C 443.900 590.095 416.218 590.159 416.216 590.159 C 416.216 590.149 414.177 515.093 415.938 493.864 M 348.421 493.864 C 349.112 485.541 354.730 479.734 362.551 479.734 C 370.371 479.734 375.654 484.516 376.680 493.864 C 378.913 514.202 376.385 590.085 376.385 590.095 C 376.382 590.095 348.701 590.159 348.698 590.159 C 348.698 590.149 346.660 515.093 348.421 493.864 M 279.908 493.864 C 280.598 485.541 286.216 479.734 294.037 479.734 C 301.858 479.734 307.140 484.516 308.167 493.864 C 310.400 514.202 307.871 590.085 307.871 590.095 C 307.869 590.095 280.187 590.159 280.184 590.159 C 280.184 590.149 278.147 515.093 279.908 493.864 M 174.593 498.596 C 175.688 484.936 184.946 475.412 197.779 475.412 C 210.611 475.412 219.323 483.253 220.964 498.596 C 224.170 528.555 220.480 640.290 220.480 640.304 C 220.475 640.304 175.052 640.409 175.047 640.409 C 175.047 640.395 172.086 529.868 174.593 498.596 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"5\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 191.700 171.321 C 191.858 149.744 191.865 123.636 191.875 108.366 C 179.035 108.366 159.471 108.366 159.468 108.366 C 159.468 108.365 159.468 96.022 159.468 96.021 C 159.471 96.021 179.035 96.021 191.876 96.021 C 191.852 83.135 191.852 63.480 191.852 63.477 C 191.853 63.477 204.195 63.477 204.196 63.477 C 204.196 63.480 204.197 84.874 204.246 96.021 C 214.989 96.021 236.577 96.021 236.580 96.021 C 236.580 96.022 236.580 108.365 236.580 108.366 C 236.577 108.366 212.328 108.366 204.244 108.366 C 204.220 128.512 204.195 153.215 204.048 172.702 C 229.192 230.560 279.244 345.734 279.252 345.751 C 279.281 345.751 572.943 345.751 572.972 345.751 C 572.977 345.762 618.604 450.178 618.608 450.189 C 618.609 450.208 621.242 645.878 621.242 645.898 C 621.191 645.898 115.186 646.775 115.136 646.776 C 115.136 646.745 115.136 344.062 115.136 344.032 C 115.136 344.032 191.700 171.321 191.700 171.321 M 549.705 493.864 C 550.395 485.541 556.014 479.734 563.834 479.734 C 571.655 479.734 576.937 484.516 577.963 493.864 C 580.196 514.202 577.669 590.085 577.669 590.095 C 577.666 590.095 549.985 590.159 549.982 590.159 C 549.982 590.149 547.945 515.093 549.705 493.864 M 169.110 344.874 C 169.110 360.661 181.845 373.396 197.632 373.396 C 213.419 373.396 226.155 360.661 226.155 344.874 C 226.155 329.086 213.420 316.351 197.632 316.351 C 181.845 316.351 169.110 329.086 169.110 344.874 M 484.393 493.864 C 485.083 485.541 490.702 479.734 498.523 479.734 C 506.343 479.734 511.625 484.516 512.652 493.864 C 514.885 514.202 512.357 590.085 512.357 590.095 C 512.354 590.095 484.672 590.159 484.670 590.159 C 484.670 590.149 482.632 515.093 484.393 493.864 M 415.938 493.864 C 416.629 485.541 422.248 479.734 430.068 479.734 C 437.889 479.734 443.171 484.516 444.197 493.864 C 446.431 514.202 443.903 590.085 443.903 590.095 C 443.900 590.095 416.218 590.159 416.216 590.159 C 416.216 590.149 414.177 515.093 415.938 493.864 M 348.421 493.864 C 349.112 485.541 354.730 479.734 362.551 479.734 C 370.371 479.734 375.654 484.516 376.680 493.864 C 378.913 514.202 376.385 590.085 376.385 590.095 C 376.382 590.095 348.701 590.159 348.698 590.159 C 348.698 590.149 346.660 515.093 348.421 493.864 M 279.908 493.864 C 280.598 485.541 286.216 479.734 294.037 479.734 C 301.858 479.734 307.140 484.516 308.167 493.864 C 310.400 514.202 307.871 590.085 307.871 590.095 C 307.869 590.095 280.187 590.159 280.184 590.159 C 280.184 590.149 278.147 515.093 279.908 493.864 M 174.593 498.596 C 175.688 484.936 184.946 475.412 197.779 475.412 C 210.611 475.412 219.323 483.253 220.964 498.596 C 224.170 528.555 220.480 640.290 220.480 640.304 C 220.475 640.304 175.052 640.409 175.047 640.409 C 175.047 640.395 172.086 529.868 174.593 498.596 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:236.564,max:564.993},y:{min:354.6,max:472.404}}],tail:[{point:{x:360,y:644.107,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:198.124,y:43.387,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:115.012,y:451.235,t:0},normal:{x:-.9999873181281341,y:.005036227050266388}},{point:{x:619.248,y:451.235,t:0},normal:{x:.9999873181281341,y:.005036227050266405}}],leg:[{point:{x:120.091,y:642.294,t:0},normal:{x:-.698688399112506,y:.7154261114507937}},{point:{x:616.459,y:642.247,t:0},normal:{x:.7129699922269475,y:.7011945451755215}}],horn:[{point:{x:573.014,y:345.122,t:0},normal:{x:.6314091670147428,y:-.775449846095638}},{point:{x:115.842,y:345.201,t:0},normal:{x:-.6817084818456931,y:-.7316239100655748}}]}},{name:\"circle arrows\",bbox:{x:{min:27.751,max:692.249},y:{min:27.751,max:692.249}},layers:[{tagName:\"g\",props:{id:\"circle\"},children:[{tagName:\"g\",props:{id:\"Circle\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 29.751 C 542.791 29.751 690.249 177.209 690.249 360.000 C 690.249 542.791 542.791 690.249 360.000 690.249 C 177.209 690.249 29.751 542.791 29.751 360.000 C 29.751 177.209 177.209 29.751 360.000 29.751 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:133.884,max:586.116},y:{min:133.884,max:586.116}}],tail:[{point:{x:360,y:685.952,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:31.274,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:32.423,y:360.936,t:0},normal:{x:-.9999873200064072,y:.005035854088756288}},{point:{x:688.623,y:360.936,t:0},normal:{x:.9999873200064072,y:.005035854088756315}}],leg:[{point:{x:127.799,y:593.841,t:0},normal:{x:-.6986883991125066,y:.7154261114507933}},{point:{x:593.334,y:593.794,t:0},normal:{x:.7129329685826609,y:.7012321885851466}}],horn:[{point:{x:592.835,y:128.186,t:0},normal:{x:.6314454286031289,y:-.7754203187279854}},{point:{x:127.956,y:128.265,t:0},normal:{x:-.6817084818456942,y:-.7316239100655739}}]}},{name:\"cloud arrows\",bbox:{x:{min:8.986,max:711.3059549777182},y:{min:134.06812556347995,max:587.2011687009165}},layers:[{tagName:\"g\",props:{id:\"cloud\"},children:[{tagName:\"g\",props:{id:\"cloud\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 10.986 448.176 C 10.986 398.984 48.289 358.729 95.924 354.106 C 90.056 340.911 86.626 325.619 86.626 309.505 C 86.626 248.451 136.011 203.230 196.931 199.198 C 230.468 196.979 261.859 206.869 283.660 229.730 C 296.109 171.798 349.218 133.881 409.664 136.166 C 477.142 138.716 536.377 187.260 534.094 256.429 C 543.811 252.145 555.245 248.934 567.244 249.624 C 613.248 252.269 655.308 301.337 636.184 353.961 C 673.742 365.944 705.687 397.356 709.014 438.721 C 713.697 496.941 661.326 536.105 603.489 544.247 C 570.009 548.959 537.549 543.254 517.199 519.624 C 504.058 533.272 486.451 546.720 465.405 547.050 C 451.728 547.265 439.365 540.672 428.767 534.057 C 400.311 577.742 348.371 589.878 294.631 583.694 C 245.540 578.046 201.340 559.694 178.848 518.221 C 159.660 536.201 133.517 544.337 105.534 542.723 C 53.289 539.710 10.986 500.507 10.986 448.176 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:200.149,max:523.043},y:{min:249.131,max:501.879}}],tail:[{point:{x:363.554,y:584.019,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:406.825,y:132.242,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:30.57,y:391.688,t:0},normal:{x:-.7720609703687837,y:-.6355484702469295}},{point:{x:683.509,y:382.495,t:0},normal:{x:.6948188673402853,y:-.7191847756925634}}],leg:[{point:{x:178.793,y:517.288,t:0},normal:{x:-.37580299742299617,y:.9266995776020898}},{point:{x:621.211,y:540.293,t:0},normal:{x:.4411742874419625,y:.8974214439716028}}],horn:[{point:{x:518.553,y:193.235,t:0},normal:{x:.7793121072891199,y:-.6266359704266833}},{point:{x:308.754,y:176.611,t:0},normal:{x:-.733010411886108,y:-.6802174182322576}}]}},{name:\"crown arrows\",bbox:{x:{min:3.8669992358582883,max:716.133},y:{min:117.642,max:601.822}},layers:[{tagName:\"g\",props:{id:\"crown\"},children:[{tagName:\"g\",props:{id:\"crown\"},children:[{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"3\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 32.399 563.090 C 32.431 563.087 96.716 529.486 360.000 529.487 C 565.004 529.488 687.569 563.087 687.601 563.090 C 687.631 563.114 641.185 597.822 360.000 597.822 C 78.815 597.822 32.431 563.093 32.399 563.090 C 32.396 563.055 7.862 209.539 7.867 209.504 C 7.874 209.519 211.254 369.876 211.259 369.889 C 211.278 369.866 359.982 121.665 360.000 121.642 C 360.003 121.661 508.740 371.035 508.741 371.050 C 508.763 371.037 712.113 209.521 712.133 209.504 C 712.131 209.540 687.328 562.865 687.601 563.090 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 7.867 209.504 C 7.874 209.519 211.254 369.876 211.259 369.889 C 211.278 369.866 359.982 121.665 360.000 121.642 C 360.003 121.661 508.740 371.035 508.741 371.050 C 508.763 371.037 712.113 209.521 712.133 209.504 C 712.131 209.540 687.328 562.865 687.601 563.090 C 687.631 563.114 641.185 597.822 360.000 597.822 C 78.815 597.822 32.431 563.093 32.399 563.090 C 32.396 563.055 7.862 209.539 7.867 209.504 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#000000\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 359.711 529.658 C 542.473 530.466 652.183 554.951 652.212 554.954 C 652.238 554.977 610.013 576.082 360.140 574.943 C 110.066 573.803 68.057 552.272 68.028 552.270 C 68.057 552.268 125.820 528.623 359.711 529.658 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 32.399 563.090 C 32.431 563.087 96.716 529.486 360.000 529.487 C 565.004 529.488 687.569 563.087 687.601 563.090 \"},children:[]}]}]}],specs:{nesting:[{x:{min:223.473,max:496.527},y:{min:367.391,max:511.257}}],tail:[{point:{x:360,y:597.224,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:80.646,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:14.211,y:260.508,t:0},normal:{x:-.7295259396629367,y:-.683953144125319}},{point:{x:704.821,y:260.508,t:0},normal:{x:.729525939662935,y:-.6839531441253209}}],arm:[{point:{x:28.053,y:456.573,t:0},normal:{x:-.9845124207185105,y:-.17531484093190394}},{point:{x:692.26,y:456.573,t:0},normal:{x:.9845124207185105,y:-.17531484093190391}}],leg:[{point:{x:128.34,y:582.124,t:0},normal:{x:-.5860328245385027,y:.8102873123549599}},{point:{x:610.571,y:582.124,t:0},normal:{x:.5859923501721364,y:.8103165835275347}}]}},{name:\"cup arrows\",bbox:{x:{min:131.16860121457583,max:588.8313987854241},y:{min:73.634,max:646.366}},layers:[{tagName:\"g\",props:{id:\"cup\"},children:[{tagName:\"g\",props:{id:\"cup\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 134.770 96.040 C 134.793 96.038 209.166 75.634 360.000 75.634 C 510.834 75.634 585.207 96.038 585.230 96.040 C 585.226 96.066 598.895 284.139 546.434 354.900 C 512.073 401.248 403.426 420.118 394.825 434.949 C 388.353 446.111 387.752 553.184 394.825 563.975 C 403.771 577.620 548.220 604.365 546.434 624.272 C 545.218 637.822 417.382 644.366 360.000 644.366 C 302.618 644.366 173.417 637.468 173.566 624.272 C 173.806 603.020 316.229 577.620 325.175 563.975 C 332.249 553.184 331.647 446.111 325.175 434.949 C 316.574 420.118 207.927 401.248 173.566 354.900 C 121.105 284.139 134.774 96.066 134.770 96.040 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 134.770 96.040 C 134.793 96.041 249.416 110.519 360.000 110.519 C 470.584 110.519 510.153 100.866 585.230 96.040 \"},children:[]}]}]}],specs:{nesting:[{x:{min:229.413,max:490.587},y:{min:121.496,max:382.67}}],tail:[{point:{x:360,y:666.131,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:22.465,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:138.138,y:247.513,t:0},normal:{x:-.9999873200064072,y:.005035854088752079}},{point:{x:582.908,y:247.513,t:0},normal:{x:.9999873200064072,y:.005035854088752106}}],leg:[{point:{x:202.68,y:634.586,t:0},normal:{x:-.698688399112506,y:.7154261114507937}},{point:{x:517.352,y:634.538,t:0},normal:{x:.7128965506064727,y:.701269212309647}}],horn:[{point:{x:581.823,y:95.15,t:0},normal:{x:.6314454286031346,y:-.7754203187279811}},{point:{x:134.563,y:95.229,t:0},normal:{x:-.6817454199674198,y:-.7315894903246263}}]}},{name:\"eye arrows\",bbox:{x:{min:10.795,max:709.205},y:{min:190.161,max:529.839}},layers:[{tagName:\"g\",props:{id:\"eye\"},children:[{tagName:\"g\",props:{id:\"eye/leaf\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"7\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 705.705 360.000 C 705.670 360.017 562.516 526.339 360.000 526.339 C 157.484 526.339 14.330 360.017 14.295 360.000 C 14.330 359.983 157.484 193.661 360.000 193.661 C 562.516 193.661 705.670 359.983 705.705 360.000 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#000000\",fillRule:\"evenodd\",stroke:\"none\",d:\"M 360.000 221.924 C 436.424 221.924 498.076 283.576 498.076 360.000 C 498.076 436.424 436.424 498.076 360.000 498.076 C 283.576 498.076 221.924 436.424 221.924 360.000 C 221.924 283.576 283.576 221.924 360.000 221.924 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:265.931,max:457.437},y:{min:264.247,max:455.753}}],tail:[{point:{x:361.684,y:523.38,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:361.684,y:181.925,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:14.26,y:359.365,t:0},normal:{x:-.9999875634527172,y:.0049872778043753814}},{point:{x:705.539,y:359.365,t:0},normal:{x:.9999875634527172,y:.004987277804375375}}],leg:[{point:{x:157.893,y:470.253,t:0},normal:{x:-.5860254780827434,y:.8102926255606009}},{point:{x:563.828,y:470.253,t:0},normal:{x:.5860254780827449,y:.8102926255605999}}],horn:[{point:{x:533.088,y:235.185,t:0},normal:{x:.5015171182352989,y:-.8651477215579784}},{point:{x:187.267,y:235.185,t:0},normal:{x:-.5014596828785342,y:-.8651810136886731}}]}},{name:\"goat horn arrows\",bbox:{x:{min:193.559,max:573.98},y:{min:22.944,max:701.194953077028}},layers:[{tagName:\"g\",props:{id:\"goat_horn\"},children:[{tagName:\"g\",props:{id:\"goat_horn\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 253.362 221.785 C 253.358 221.794 208.708 319.241 208.703 319.251 C 208.702 319.264 196.561 428.225 196.559 428.237 C 196.562 428.253 217.161 560.677 217.163 560.690 C 217.174 560.715 272.873 687.743 272.877 687.753 C 272.887 687.755 320.745 702.031 376.165 697.195 C 456.649 690.174 493.179 657.847 493.191 657.843 C 493.185 657.835 432.902 588.465 417.990 563.792 C 410.217 550.931 376.530 477.694 370.683 453.680 C 366.539 436.659 359.422 390.074 359.542 359.093 C 359.645 332.680 363.888 303.095 371.133 272.728 C 378.319 242.607 386.614 216.049 396.194 193.954 C 407.664 167.499 424.500 138.527 437.133 121.013 C 449.438 103.953 472.058 84.436 482.931 76.009 C 519.315 47.810 570.975 25.953 570.980 25.944 C 570.974 25.949 457.686 51.908 457.665 51.913 C 457.657 51.917 382.373 89.082 382.364 89.087 C 382.356 89.093 310.055 148.344 310.047 148.351 C 310.041 148.358 253.367 221.778 253.362 221.785 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 457.665 51.913 C 457.665 51.915 455.929 61.463 462.996 68.928 C 471.382 77.785 482.929 76.008 482.931 76.009 C 519.315 47.810 570.975 25.953 570.980 25.944 C 570.974 25.949 457.686 51.908 457.665 51.913 C 457.657 51.917 382.373 89.082 382.364 89.087 C 382.366 89.089 392.249 107.724 404.880 115.738 C 419.059 124.735 437.130 121.012 437.133 121.013 C 449.438 103.953 472.058 84.436 482.931 76.009 M 310.047 148.351 C 310.051 148.354 322.413 169.361 349.357 183.162 C 374.020 195.795 396.189 193.953 396.194 193.954 C 407.664 167.499 424.500 138.527 437.133 121.013 M 217.163 560.690 C 217.173 560.692 262.106 583.955 326.442 583.318 C 383.196 582.755 417.981 563.794 417.990 563.792 C 410.217 550.931 376.530 477.694 370.683 453.680 C 370.675 453.681 337.570 469.493 290.062 464.261 C 232.640 457.938 196.569 428.240 196.559 428.237 C 196.562 428.253 217.161 560.677 217.163 560.690 C 217.174 560.715 272.873 687.743 272.877 687.753 C 272.887 687.755 320.745 702.031 376.165 697.195 C 456.649 690.174 493.179 657.847 493.191 657.843 C 493.185 657.835 432.902 588.465 417.990 563.792 M 208.703 319.251 C 208.711 319.255 236.382 351.365 286.488 362.790 C 327.604 372.166 359.535 359.093 359.542 359.093 C 359.645 332.680 363.888 303.095 371.133 272.728 C 371.126 272.727 343.205 273.965 310.032 260.039 C 273.686 244.780 253.367 221.789 253.362 221.785 C 253.367 221.778 310.041 148.358 310.047 148.351 C 310.055 148.344 382.356 89.093 382.364 89.087 M 371.133 272.728 C 378.319 242.607 386.614 216.049 396.194 193.954 M 370.683 453.680 C 366.539 436.659 359.422 390.074 359.542 359.093 M 208.703 319.251 C 208.702 319.264 196.561 428.225 196.559 428.237 M 253.362 221.785 C 253.358 221.794 208.708 319.241 208.703 319.251 \"},children:[]}]}]}],specs:{tail:[{point:{x:349.391,y:612.113,t:0},normal:{x:-.37822562758699113,y:-.9257134408856915}}],crown:[{point:{x:588.331,y:21.186,t:0},normal:{x:.9762985855328534,y:-.21642798314115885}}],horn:[{point:{x:434.703,y:120.244,t:0},normal:{x:.999294691124027,y:-.03755156842710392}},{point:{x:383.645,y:90.162,t:0},normal:{x:-.2617019520261627,y:-.9651487389546215}}],arm:[{point:{x:359.062,y:356.465,t:0},normal:{x:.9231776096361137,y:-.38437364772646837}},{point:{x:210.053,y:319.556,t:0},normal:{x:-.633381035649782,y:-.7738400762943268}}],leg:[{point:{x:293.5,y:688.358,t:0},normal:{x:.04456534445297,y:.9990064714874414}},{point:{x:474.97,y:663.517,t:0},normal:{x:.7745590827139428,y:.6325015631485313}}]}},{name:\"hand arrows\",bbox:{x:{min:63.56840488153256,max:619.2281782258725},y:{min:21.749640854640067,max:691.7110506192627}},layers:[{tagName:\"g\",props:{id:\"hand\"},children:[{tagName:\"g\",props:{id:\"hand\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 390.967 689.625 C 352.470 690.982 289.590 676.101 266.354 658.305 C 226.717 627.948 185.008 573.493 176.490 558.209 C 169.167 545.070 134.355 470.626 121.094 446.130 C 106.429 419.040 62.810 377.409 65.706 362.063 C 67.863 350.634 97.035 344.008 109.476 349.521 C 128.097 357.773 147.635 379.013 152.654 383.292 C 172.398 400.121 214.474 481.500 228.920 478.768 C 245.591 475.616 255.018 446.870 260.697 431.104 C 265.363 418.150 264.512 330.462 263.875 316.708 C 263.156 301.163 249.518 200.087 248.120 188.330 C 246.907 178.124 230.813 89.546 235.276 76.796 C 236.733 72.632 242.283 50.130 258.915 48.758 C 273.034 47.594 280.875 61.350 282.941 64.086 C 291.465 75.376 302.172 169.166 304.558 179.662 C 306.970 190.273 322.366 288.517 335.371 294.465 C 337.315 295.354 351.242 292.696 352.849 291.288 C 363.377 282.060 362.431 186.010 363.065 175.377 C 363.794 163.169 358.930 55.656 367.148 41.842 C 368.987 38.751 376.102 23.063 390.962 23.773 C 403.981 24.395 411.514 38.846 413.224 41.842 C 421.003 55.482 416.554 160.362 417.248 172.289 C 417.892 183.349 416.469 283.400 427.524 292.876 C 429.433 294.513 445.959 297.236 448.178 296.054 C 459.509 290.024 465.550 200.708 467.238 191.090 C 468.894 181.654 477.077 97.922 484.721 87.918 C 486.917 85.043 497.476 69.148 510.574 72.554 C 522.853 75.747 529.638 98.057 530.797 102.218 C 534.138 114.219 518.201 195.452 517.465 204.902 C 516.523 217.008 506.221 323.763 514.331 337.507 C 515.505 339.498 527.496 349.234 529.786 348.918 C 542.875 347.113 554.690 252.296 556.815 242.469 C 558.591 234.261 567.251 163.018 573.117 152.192 C 574.716 149.241 586.821 136.707 597.916 139.416 C 608.423 141.981 615.475 160.621 616.593 164.182 C 620.867 177.787 602.224 270.895 600.815 281.654 C 598.110 302.306 579.949 481.140 572.106 507.368 C 566.650 525.613 548.273 614.525 504.233 650.361 C 463.292 683.675 419.052 688.635 390.967 689.625 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:272.777,max:527.215},y:{min:358.318,max:612.755}}],tail:[{point:{x:384.579,y:685.952,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:390.085,y:22.465,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:77.039,y:351.068,t:0},normal:{x:-.7474665192668988,y:-.664299482594279}},{point:{x:598.719,y:138.908,t:0},normal:{x:.23447643104244953,y:-.9721218047578171}}],leg:[{point:{x:265.802,y:658.812,t:0},normal:{x:-.6987263029800354,y:.7153890923992705}},{point:{x:500.085,y:656.562,t:0},normal:{x:.7129329685826631,y:.7012321885851444}}],horn:[{point:{x:510.774,y:70.501,t:0},normal:{x:.187006604893689,y:-.9823586563603619}},{point:{x:256.083,y:48.808,t:0},normal:{x:-.2123251059680842,y:-.9771990837979955}}]}},{name:\"heart arrows\",bbox:{x:{min:58.453257349882094,max:662.4669915630274},y:{min:69.15146612001438,max:642.645}},layers:[{tagName:\"g\",props:{id:\"heart\"},children:[{tagName:\"g\",props:{id:\"heart\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 640.645 C 359.984 640.631 255.492 546.213 201.451 494.254 C 136.886 432.177 62.120 363.043 60.489 266.121 C 59.200 189.509 92.778 99.083 160.777 79.370 C 311.958 35.543 359.980 181.279 360.000 181.290 C 360.020 181.279 407.948 35.866 559.223 79.370 C 627.404 98.978 661.684 189.350 660.434 266.121 C 658.853 363.220 586.640 435.817 518.549 494.254 C 458.308 545.955 360.016 640.631 360.000 640.645 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:222.903,max:497.097},y:{min:199.827,max:474.021}}],tail:[{point:{x:360,y:638.877,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:31.274,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:61.037,y:289.862,t:0},normal:{x:-.999987318128134,y:.005036227050266385}},{point:{x:660.932,y:289.862,t:0},normal:{x:.9999873181281341,y:.005036227050266405}}],leg:[{point:{x:191.489,y:487.691,t:0},normal:{x:-.6986883991125039,y:.7154261114507957}},{point:{x:524.106,y:492.258,t:0},normal:{x:.7128965506064706,y:.7012692123096491}}],horn:[{point:{x:568.911,y:81.816,t:0},normal:{x:.36472881699522125,y:-.9311137900671789}},{point:{x:139.961,y:87.568,t:0},normal:{x:-.4789507180547663,y:-.8778417907999275}}]}},{name:\"leg arrows\",bbox:{x:{min:126.57814697566243,max:556.6833865198157},y:{min:34.68727990770465,max:704.2839219860739}},layers:[{tagName:\"g\",props:{id:\"leg\"},children:[{tagName:\"g\",props:{id:\"leg\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 398.907 48.738 C 360.700 66.464 244.625 170.755 217.241 202.757 C 198.305 224.885 134.960 313.673 129.846 342.345 C 128.593 349.370 131.994 375.799 134.702 382.401 C 159.924 443.913 323.300 594.711 319.679 631.739 C 318.647 642.290 275.980 654.799 266.064 658.547 C 254.877 662.775 211.576 670.837 200.653 675.704 C 195.750 677.888 174.117 686.482 174.917 691.788 C 175.360 694.723 187.067 698.510 189.929 699.295 C 201.819 702.552 247.317 700.968 259.630 700.367 C 271.448 699.790 314.299 693.518 326.113 692.861 C 336.716 692.271 377.803 699.410 386.162 692.861 C 390.883 689.162 397.545 666.652 396.886 660.692 C 396.099 653.579 378.506 632.843 375.439 626.378 C 356.433 586.308 340.314 468.549 314.346 417.602 C 300.326 390.096 247.823 364.414 248.800 353.270 C 250.547 333.341 450.913 264.419 491.567 240.113 C 524.011 220.716 571.664 165.500 546.723 107.810 C 527.773 63.976 470.724 15.419 398.907 48.738 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:227.488,max:466.116},y:{min:107.91,max:319.807}}],tail:[{point:{x:435.653,y:151.322,t:0},normal:{x:-.8032874834447987,y:.595591486625625}}],crown:[{point:{x:439.43,y:30.49,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:129.893,y:350.922,t:0},normal:{x:-.9999871527828806,y:.0050689514880203485}},{point:{x:248.855,y:354.614,t:0},normal:{x:.9999871547863848,y:.005068556227472927}}],leg:[{point:{x:215.836,y:697.253,t:0},normal:{x:-.5860228456054639,y:.810294529432647}},{point:{x:367.874,y:693.561,t:0},normal:{x:.5860228456054624,y:.8102945294326479}}],horn:[{point:{x:537.421,y:90.714,t:0},normal:{x:.7932497595550108,y:-.608896394278959}},{point:{x:350.426,y:76.84,t:0},normal:{x:-.7727781591759261,y:-.6346762298216841}}]}},{name:\"leg hoof arrows\",bbox:{x:{min:178.522,max:543.838617230298},y:{min:23.711216587980402,max:703.517}},layers:[{tagName:\"g\",props:{id:\"leg_hoof\"},children:[{tagName:\"g\",props:{id:\"leg_hoof\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 262.447 76.190 C 169.494 168.080 193.768 278.851 211.734 323.283 C 241.223 396.212 358.661 413.649 369.270 448.448 C 375.479 468.815 355.227 546.789 341.215 562.822 C 330.342 575.264 270.288 588.538 257.053 598.429 C 249.890 603.782 224.628 635.767 224.625 635.770 C 224.620 635.777 181.526 697.692 181.522 697.698 C 181.526 697.699 223.554 700.517 223.558 700.517 C 223.567 700.517 309.916 697.699 309.924 697.698 C 309.926 697.693 324.225 643.236 324.227 643.231 C 324.227 643.229 325.669 626.664 328.267 624.326 C 334.214 618.973 366.985 619.613 372.507 625.405 C 401.658 655.982 405.975 530.160 416.746 486.213 C 422.126 464.260 437.431 415.166 466.380 398.813 C 482.836 389.518 404.583 391.842 393.008 324.361 C 373.609 211.278 536.845 251.600 540.832 109.639 C 541.429 88.374 501.551 39.689 453.432 30.871 C 395.511 20.256 311.094 28.100 262.447 76.190 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 255.128 640.832 C 244.605 660.727 234.081 680.622 223.558 700.517 M 224.625 635.770 C 234.793 637.458 255.125 640.831 255.128 640.832 C 255.135 640.832 301.194 642.431 324.227 643.231 \"},children:[]}]}]}],specs:{nesting:[{x:{min:287.715,max:445.675},y:{min:67.432,max:225.391}}],tail:[{point:{x:372.991,y:143.772,t:0},normal:{x:-.5229745184940358,y:.8523483167144353}}],crown:[{point:{x:393.066,y:27.348,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:529.286,y:80.376,t:0},normal:{x:.6425583644962964,y:-.7662367442349945}},{point:{x:260.543,y:77.092,t:0},normal:{x:-.7295033267832964,y:-.6839772629350358}}],arm:[{point:{x:465.164,y:396.139,t:0},normal:{x:.9673196842576036,y:-.2535599109634052}},{point:{x:209.953,y:319.649,t:0},normal:{x:-.8636009731486428,y:.5041759208616741}}],leg:[{point:{x:267.554,y:589.289,t:0},normal:{x:-.3941694711694836,y:-.9190377728896509}},{point:{x:385.08,y:626.266,t:0},normal:{x:.5004561711697899,y:.8657618729986174}}]}},{name:\"lightning arrows\",bbox:{x:{min:162.964,max:557.036},y:{min:23.652,max:696.348}},layers:[{tagName:\"g\",props:{id:\"lightning\"},children:[{tagName:\"g\",props:{id:\"lightning\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 350.712 59.706 C 350.697 59.738 192.842 378.543 192.826 378.575 C 192.838 378.575 313.552 378.575 313.564 378.575 C 313.549 378.606 164.979 694.316 164.964 694.348 C 164.996 694.308 477.610 295.029 477.641 294.989 C 477.628 294.988 344.535 288.798 344.521 288.797 C 344.542 288.771 555.013 25.677 555.036 25.652 C 555.016 25.654 350.733 59.702 350.712 59.706 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:296.354,max:430.254},y:{min:99.24,max:233.139}}],tail:[{point:{x:420.213,y:81.946,t:0},normal:{x:-.42006189611052,y:.9074954564272126}}],crown:[{point:{x:442.59,y:20.262,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:234.935,y:293.681,t:0},normal:{x:-.8841281581425834,y:-.46724447560073185}},{point:{x:465.308,y:299.353,t:0},normal:{x:.9378211029235229,y:-.3471189693913416}}],leg:[{point:{x:202.681,y:369.198,t:0},normal:{x:-.6987633221457803,y:.7153529336095521}},{point:{x:409.435,y:377.959,t:0},normal:{x:.7128965506064706,y:.7012692123096491}}],horn:[{point:{x:542.079,y:33.628,t:0},normal:{x:.7961621941231024,y:-.6050832675335579}},{point:{x:352.6,y:63.294,t:0},normal:{x:-.681745419967422,y:-.7315894903246241}}]}},{name:\"muscle arm arrows\",bbox:{x:{min:6.936522580951433,max:701.4817636367219},y:{min:26.78931846953734,max:690.8096370246851}},layers:[{tagName:\"g\",props:{id:\"muscle_arm\"},children:[{tagName:\"g\",props:{id:\"muscle_arm\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 453.048 208.605 C 453.041 208.606 408.981 230.248 384.029 213.285 C 378.324 209.407 376.811 199.214 376.810 199.213 C 376.810 199.215 385.072 224.615 374.272 227.531 C 341.459 236.393 291.031 236.616 279.444 222.848 C 275.470 218.125 277.695 190.333 277.695 190.329 C 277.691 190.325 239.189 163.001 236.268 151.146 C 230.691 128.511 266.598 62.465 280.512 51.666 C 298.946 37.360 397.490 24.461 423.402 32.026 C 443.294 37.833 485.937 76.234 509.367 101.807 C 547.926 143.894 592.515 219.797 609.107 254.310 C 634.411 306.944 686.952 478.971 692.720 519.332 C 694.452 531.453 704.240 590.221 693.578 602.786 C 688.537 608.727 655.492 613.080 655.488 613.081 C 655.462 613.088 506.449 670.958 390.264 683.710 C 324.756 690.900 287.306 688.035 235.562 679.754 C 204.940 674.854 147.522 654.558 147.513 654.555 C 147.504 654.558 118.770 697.145 53.669 685.485 C -4.575 675.053 10.724 553.781 14.793 420.739 C 17.281 339.385 87.887 330.256 147.667 341.035 C 212.745 352.770 223.311 406.739 223.318 406.745 C 223.318 406.745 223.557 406.700 223.593 406.666 C 244.099 387.182 316.726 365.437 354.443 364.372 C 409.937 362.806 445.759 400.238 444.473 397.300 C 438.148 382.854 428.595 354.376 430.775 320.032 C 434.212 265.884 453.046 208.616 453.048 208.605 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"6\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 223.593 406.666 C 227.905 422.208 232.217 437.750 236.529 453.292 M 224.657 536.877 C 224.672 536.884 298.599 599.625 382.363 603.158 C 446.584 605.866 466.036 577.777 507.873 565.087 M 147.513 654.555 C 147.521 654.543 173.400 587.874 224.657 536.877 C 248.044 513.609 255.543 513.926 270.986 502.450 M 655.488 613.081 C 610.900 611.713 580.949 598.430 521.722 608.978 M 330.733 87.365 C 330.731 87.371 307.699 117.521 312.620 147.531 C 315.240 163.504 351.259 190.983 351.262 190.988 C 351.265 190.988 368.294 196.471 376.810 199.213 M 310.193 189.524 C 310.190 189.520 278.608 165.812 275.873 150.738 C 271.240 125.201 290.805 89.762 290.807 89.756 M 394.297 183.813 C 394.293 183.809 353.107 153.101 350.768 142.895 C 343.067 109.296 368.251 84.849 368.253 84.843 M 277.695 190.329 C 277.698 190.329 300.296 188.493 310.193 189.524 C 324.202 190.983 351.258 190.987 351.262 190.988 C 351.265 190.987 371.665 191.554 380.103 189.596 C 384.582 188.557 394.296 183.814 394.297 183.813 C 394.301 183.812 421.981 183.436 426.041 171.828 C 431.865 155.178 397.347 132.518 397.344 132.514 C 397.345 132.511 404.930 128.580 411.388 104.501 M 444.473 397.300 C 471.962 421.167 480.324 428.504 509.975 494.333 \"},children:[]}]}]}],specs:{nesting:[{x:{min:264.746,max:440.148},y:{min:397.464,max:572.866}}],tail:[{point:{x:101.524,y:506.501,t:0},normal:{x:1,y:0}}],crown:[{point:{x:354.688,y:30.891,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:462.208,y:57.632,t:0},normal:{x:.5932645727486776,y:-.8050075445120555}},{point:{x:265.504,y:70.041,t:0},normal:{x:-.7295033267832971,y:-.6839772629350351}}],arm:[{point:{x:622.301,y:281.634,t:0},normal:{x:.875517947573837,y:-.4831855994088567}},{point:{x:429.317,y:303.974,t:0},normal:{x:-.9845161967421302,y:-.17529363466027906}}],leg:[{point:{x:241.104,y:678.091,t:0},normal:{x:-.5860442215265754,y:.8102790694663847}},{point:{x:504.853,y:659.792,t:0},normal:{x:.586011024588664,y:.8103030785209596}}]}},{name:\"skull arrows\",bbox:{x:{min:96.73146699484867,max:621.0865330051513},y:{min:64.598,max:642.476}},layers:[{tagName:\"g\",props:{id:\"skull\"},children:[{tagName:\"g\",props:{id:\"skull\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 143.297 308.706 C 143.297 255.657 186.092 212.862 239.141 212.862 C 292.191 212.862 334.986 255.657 334.986 308.706 C 334.986 361.756 292.191 404.552 239.141 404.551 C 186.092 404.551 143.297 361.756 143.297 308.706 M 308.262 456.816 C 308.267 456.807 358.904 364.992 358.909 364.983 C 358.914 364.992 409.552 456.807 409.557 456.816 C 409.547 456.816 308.272 456.816 308.262 456.816 M 381.314 307.017 C 381.314 254.363 423.791 211.886 476.445 211.886 C 529.100 211.886 571.577 254.362 571.577 307.017 C 571.577 359.672 529.100 402.148 476.445 402.148 C 423.791 402.148 381.314 359.671 381.314 307.017 M 221.160 640.476 C 221.160 640.464 222.505 543.376 222.856 518.039 C 155.372 473.349 100.875 398.064 98.793 308.457 C 95.564 169.482 219.897 66.598 358.909 66.598 C 497.921 66.598 622.254 169.482 619.025 308.457 C 616.944 398.064 562.447 473.350 494.963 518.039 C 495.314 543.377 496.659 640.464 496.659 640.476 C 496.655 640.476 452.862 640.476 452.858 640.476 C 452.858 640.470 452.858 577.761 452.858 577.755 C 452.857 577.755 438.406 577.755 438.404 577.755 C 438.404 577.761 438.404 640.470 438.404 640.476 C 438.400 640.476 395.048 640.476 395.043 640.476 C 395.043 640.470 395.043 577.761 395.043 577.755 C 395.042 577.755 380.591 577.755 380.590 577.755 C 380.590 577.761 380.590 640.470 380.590 640.476 C 380.586 640.476 337.233 640.476 337.229 640.476 C 337.229 640.470 337.229 577.761 337.229 577.755 C 337.227 577.755 322.777 577.755 322.775 577.755 C 322.775 577.761 322.775 640.470 322.775 640.476 C 322.771 640.476 279.416 640.476 279.412 640.476 C 279.412 640.470 279.415 577.761 279.415 577.755 C 279.413 577.755 264.963 577.755 264.961 577.755 C 264.961 577.761 264.961 640.470 264.961 640.476 C 264.957 640.476 221.164 640.476 221.160 640.476 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:292.227,max:427.773},y:{min:83,max:218.545}}],tail:[{point:{x:360,y:672.738,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:31.274,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:97.393,y:299.269,t:0},normal:{x:-.9999869423966428,y:.0051102872926518435}},{point:{x:620.349,y:299.269,t:0},normal:{x:.9999869443305632,y:.005109908846835966}}],leg:[{point:{x:178.454,y:482.621,t:0},normal:{x:-.6987254201015092,y:.7153899547127913}},{point:{x:540.477,y:482.573,t:0},normal:{x:.7128965506064706,y:.7012692123096491}}],horn:[{point:{x:543.281,y:134.793,t:0},normal:{x:.631445428603134,y:-.7754203187279815}},{point:{x:175.307,y:134.872,t:0},normal:{x:-.6817454199674192,y:-.7315894903246267}}]}},{name:\"sword arrows\",bbox:{x:{min:289.512,max:430.488},y:{min:6.385,max:713.615}},layers:[{tagName:\"g\",props:{id:\"sword\"},children:[{tagName:\"g\",props:{id:\"sword_2\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 333.907 585.978 C 333.909 585.978 359.997 585.978 360.000 585.978 C 360.003 585.978 386.091 585.978 386.093 585.978 C 386.093 585.926 384.542 70.655 384.542 70.604 C 384.539 70.598 360.002 8.391 360.000 8.385 C 359.998 8.391 335.461 70.598 335.458 70.604 C 335.458 70.655 333.907 585.926 333.907 585.978 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 291.512 585.978 C 291.525 585.978 428.475 585.978 428.488 585.978 C 428.488 585.980 428.488 602.738 428.488 602.739 C 428.475 602.739 291.525 602.739 291.512 602.739 C 291.512 602.738 291.512 585.980 291.512 585.978 Z\"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 347.464 664.775 C 351.133 662.690 355.421 661.471 360.000 661.471 C 364.579 661.471 368.867 662.691 372.536 664.775 C 372.573 644.305 372.647 602.745 372.647 602.739 C 372.644 602.739 347.356 602.739 347.353 602.739 C 347.353 602.745 347.427 644.305 347.464 664.775 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 360.000 661.471 C 364.579 661.471 368.867 662.691 372.536 664.775 \"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#ffffff\",strokeWidth:\"1\",strokeLinecap:\"butt\",strokeLinejoin:\"round\",d:\"M 347.464 664.775 C 351.133 662.690 355.421 661.471 360.000 661.471 \"},children:[]},{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 661.471 C 364.579 661.471 368.867 662.691 372.536 664.775 C 380.046 669.152 385.072 677.245 385.072 686.543 C 385.072 700.420 373.877 711.615 360.000 711.615 C 346.123 711.615 334.928 700.420 334.928 686.543 C 334.928 677.245 339.954 669.152 347.464 664.775 C 351.133 662.690 355.421 661.471 360.000 661.471 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"4\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 585.978 C 360.000 406.006 360.000 226.034 360.000 46.062 \"},children:[]}]}]}],specs:{tail:[{point:{x:360,y:598.958,t:0},normal:{x:0,y:-1}}],crown:[{point:{x:360,y:16.959,t:0},normal:{x:0,y:-1}}],arm:[{point:{x:331.948,y:360.936,t:0},normal:{x:-.9999869423966429,y:.005110287292651861}},{point:{x:386.896,y:360.936,t:0},normal:{x:.9999869423966429,y:.005110287292651839}}],leg:[{point:{x:292.979,y:601.55,t:0},normal:{x:-.6987263029800311,y:.7153890923992746}},{point:{x:427.054,y:601.502,t:0},normal:{x:.7128965506064706,y:.7012692123096492}}],horn:[{point:{x:383.608,y:128.186,t:0},normal:{x:.6314454286031315,y:-.7754203187279834}},{point:{x:334.981,y:128.265,t:0},normal:{x:-.6817481203990758,y:-.7315869738673094}}]}},{name:\"tail arrows\",bbox:{x:{min:319.325,max:400.676},y:{min:33.263,max:701.277}},layers:[{tagName:\"g\",props:{id:\"tail\"},children:[{tagName:\"g\",props:{id:\"tail\"},children:[{tagName:\"path\",props:{fill:\"#000000\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"8\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 323.325 596.511 C 323.328 596.514 345.922 625.789 360.000 625.789 C 374.078 625.789 396.672 596.514 396.676 596.511 C 396.672 596.521 360.004 697.267 360.000 697.277 C 359.996 697.267 323.328 596.521 323.325 596.511 Z\"},children:[]},{tagName:\"path\",props:{fill:\"none\",stroke:\"#000000\",strokeWidth:\"20\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 360.000 43.263 C 360.718 117.065 340.970 143.093 342.736 193.429 C 344.521 244.303 370.802 292.613 370.790 343.438 C 370.779 394.268 343.342 442.441 342.736 493.134 C 341.915 561.827 354.256 581.656 360.000 625.789 \"},children:[]}]}]}],specs:{tail:[{point:{x:359.037,y:50.103,t:0},normal:{x:0,y:1}}],crown:[{point:{x:359.037,y:23.18,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:389.69,y:56.995,t:0},normal:{x:.7911103969400158,y:-.6116733931220244}},{point:{x:332.921,y:57.521,t:0},normal:{x:-.7295033267832962,y:-.6839772629350359}}],arm:[{point:{x:409.922,y:343.991,t:0},normal:{x:.7875519448121661,y:-.616248273200481}},{point:{x:329.364,y:343.991,t:0},normal:{x:-.7875274058771101,y:-.6162796321415055}}],leg:[{point:{x:328.746,y:684.832,t:0},normal:{x:-.5860202132297126,y:.8102964332182403}},{point:{x:392.171,y:683.869,t:0},normal:{x:.5860110245886658,y:.8103030785209582}}]}},{name:\"wing arrows\",bbox:{x:{min:34.158,max:649.3546768303617},y:{min:12.740979887338685,max:681.4491542185363}},layers:[{tagName:\"g\",props:{id:\"wing\"},children:[{tagName:\"g\",props:{id:\"wingR\"},children:[{tagName:\"path\",props:{fill:\"#ffffff\",fillRule:\"evenodd\",stroke:\"#000000\",strokeWidth:\"9\",strokeLinecap:\"round\",strokeLinejoin:\"round\",d:\"M 51.607 541.041 C 51.621 541.030 140.218 507.604 189.529 435.852 C 257.361 337.148 196.921 286.805 236.012 227.904 C 258.887 193.438 314.823 180.442 396.288 134.157 C 534.042 55.892 629.635 2.982 642.560 20.654 C 654.725 37.289 616.431 111.238 576.995 141.393 C 534.013 174.259 447.165 208.866 447.152 208.873 C 447.167 208.870 580.944 158.583 591.730 177.960 C 599.348 191.644 568.887 239.711 533.218 264.436 C 502.582 285.672 426.403 309.624 426.392 309.629 C 426.406 309.628 556.068 281.104 563.434 300.346 C 568.721 314.157 531.334 361.760 496.731 372.947 C 437.826 391.991 383.664 401.023 383.653 401.026 C 383.665 401.027 503.818 398.206 508.161 416.519 C 511.201 429.340 479.149 469.712 443.397 475.873 C 406.371 482.253 341.272 479.834 341.262 479.834 C 341.273 479.837 444.989 488.047 455.093 511.059 C 458.614 519.076 436.569 544.861 390.158 558.151 C 339.074 572.778 299.627 548.388 299.618 548.387 C 299.626 548.392 376.914 586.902 373.012 599.761 C 368.043 616.135 334.138 625.473 297.171 621.780 C 270.110 619.077 218.894 589.981 218.886 589.978 C 218.893 589.985 309.797 640.830 292.279 660.923 C 284.306 670.068 233.034 667.909 211.547 656.031 C 196.617 647.778 140.608 607.107 140.601 607.102 C 140.604 607.109 182.460 673.240 169.958 675.601 C 138.130 681.613 111.004 666.604 89.225 648.691 C 75.101 637.074 51.611 597.312 51.607 597.307 C 51.606 597.304 38.660 568.249 38.658 568.246 C 38.660 568.243 51.606 541.043 51.607 541.041 Z\"},children:[]}]}]}],specs:{nesting:[{x:{min:234.232,max:427.638},y:{min:200.43,max:393.836}}],tail:[{point:{x:79.754,y:564.353,t:0},normal:{x:.8816030634492946,y:-.4719915661500945}}],crown:[{point:{x:456.905,y:23.225,t:0},normal:{x:0,y:-1}}],horn:[{point:{x:634.556,y:27.153,t:0},normal:{x:.706778064897462,y:-.7074353447346261}},{point:{x:356.397,y:154.406,t:0},normal:{x:-.4221338348807563,y:-.9065335214148822}}],arm:[{point:{x:561.212,y:304.459,t:0},normal:{x:.9209372426434576,y:-.38971091223144566}},{point:{x:229.076,y:236.729,t:0},normal:{x:-.8293412994068105,y:-.5587423458967676}}],leg:[{point:{x:142.565,y:673.269,t:0},normal:{x:-.4144808712361082,y:.9100580241827203}},{point:{x:361.344,y:610.82,t:0},normal:{x:.8301943884230218,y:.557474015027539}}]}}];","import React, { useState } from \"react\";\r\nimport { BBox } from \"../../vendor/bezier-js\";\r\nimport { dilateBoundingBox, getBoundingBoxSize } from \"../bounding-box\";\r\nimport { FILL_REPLACEMENT_COLOR, STROKE_REPLACEMENT_COLOR } from \"../colors\";\r\nimport * as colors from \"../colors\";\r\nimport { PointWithNormal, Specs } from \"../specs\";\r\n\r\nimport _SvgVocabulary from \"../svg-vocabulary.json\";\r\nimport type { SvgSymbolData, SvgSymbolElement } from \"../vocabulary\";\r\n\r\nconst SvgVocabulary: SvgSymbolData[] = _SvgVocabulary as any;\r\n\r\ntype SvgSymbolContext = {\r\n  stroke: string;\r\n  fill: string;\r\n  showSpecs: boolean;\r\n};\r\n\r\ntype SvgSymbolProps = {\r\n  data: SvgSymbolData;\r\n  scale?: number;\r\n} & SvgSymbolContext;\r\n\r\nconst px = (value: number) => `${value}px`;\r\n\r\nfunction getColor(\r\n  ctx: SvgSymbolContext,\r\n  color: string | undefined\r\n): string | undefined {\r\n  switch (color) {\r\n    case STROKE_REPLACEMENT_COLOR:\r\n      return ctx.stroke;\r\n    case FILL_REPLACEMENT_COLOR:\r\n      return ctx.fill;\r\n  }\r\n  return color;\r\n}\r\n\r\nfunction reactifySvgSymbolElement(\r\n  ctx: SvgSymbolContext,\r\n  el: SvgSymbolElement,\r\n  key: number\r\n): JSX.Element {\r\n  let { fill, stroke } = el.props;\r\n  fill = getColor(ctx, fill);\r\n  stroke = getColor(ctx, stroke);\r\n  return React.createElement(\r\n    el.tagName,\r\n    {\r\n      ...el.props,\r\n      id: undefined,\r\n      fill,\r\n      stroke,\r\n      key,\r\n    },\r\n    el.children.map(reactifySvgSymbolElement.bind(null, ctx))\r\n  );\r\n}\r\n\r\nconst ATTACHMENT_POINT_RADIUS = 20;\r\n\r\nconst ATTACHMENT_POINT_NORMAL_LENGTH = 50;\r\n\r\nconst ATTACHMENT_POINT_NORMAL_STROKE = 4;\r\n\r\nconst AttachmentPoints: React.FC<{\r\n  color: string;\r\n  points: PointWithNormal[];\r\n}> = (props) => (\r\n  <>\r\n    {props.points.map((pwn, i) => {\r\n      const { x, y } = pwn.point;\r\n      const x2 = x + pwn.normal.x * ATTACHMENT_POINT_NORMAL_LENGTH;\r\n      const y2 = y + pwn.normal.y * ATTACHMENT_POINT_NORMAL_LENGTH;\r\n      return (\r\n        <React.Fragment key={i}>\r\n          <circle\r\n            fill={props.color}\r\n            r={ATTACHMENT_POINT_RADIUS}\r\n            cx={x}\r\n            cy={y}\r\n          />\r\n          <line\r\n            x1={x}\r\n            y1={y}\r\n            x2={x2}\r\n            y2={y2}\r\n            stroke={props.color}\r\n            strokeWidth={ATTACHMENT_POINT_NORMAL_STROKE}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nconst BoundingBoxes: React.FC<{ fill: string; bboxes: BBox[] }> = (props) => (\r\n  <>\r\n    {props.bboxes.map((b, i) => {\r\n      const [width, height] = getBoundingBoxSize(b);\r\n      return (\r\n        <rect\r\n          key={i}\r\n          x={b.x.min}\r\n          y={b.y.min}\r\n          width={width}\r\n          height={height}\r\n          fill={props.fill}\r\n        />\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nconst SvgSymbolSpecs: React.FC<{ specs: Specs }> = ({ specs }) => {\r\n  return (\r\n    <>\r\n      {specs.tail && (\r\n        <AttachmentPoints\r\n          color={colors.TAIL_ATTACHMENT_COLOR}\r\n          points={specs.tail}\r\n        />\r\n      )}\r\n      {specs.leg && (\r\n        <AttachmentPoints\r\n          color={colors.LEG_ATTACHMENT_COLOR}\r\n          points={specs.leg}\r\n        />\r\n      )}\r\n      {specs.arm && (\r\n        <AttachmentPoints\r\n          color={colors.ARM_ATTACHMENT_COLOR}\r\n          points={specs.arm}\r\n        />\r\n      )}\r\n      {specs.horn && (\r\n        <AttachmentPoints\r\n          color={colors.HORN_ATTACHMENT_COLOR}\r\n          points={specs.horn}\r\n        />\r\n      )}\r\n      {specs.crown && (\r\n        <AttachmentPoints\r\n          color={colors.CROWN_ATTACHMENT_COLOR}\r\n          points={specs.crown}\r\n        />\r\n      )}\r\n      {specs.nesting && (\r\n        <BoundingBoxes\r\n          fill={colors.NESTING_BOUNDING_BOX_COLOR}\r\n          bboxes={specs.nesting}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst BBOX_DILATION = 50;\r\n\r\nconst SvgSymbol: React.FC<SvgSymbolProps> = (props) => {\r\n  const d = props.data;\r\n  const bbox = dilateBoundingBox(d.bbox, BBOX_DILATION);\r\n  const scale = props.scale || 1;\r\n  const [width, height] = getBoundingBoxSize(bbox);\r\n\r\n  return (\r\n    <svg\r\n      viewBox={`${bbox.x.min} ${bbox.y.min} ${width} ${height}`}\r\n      width={px(width * scale)}\r\n      height={px(height * scale)}\r\n    >\r\n      {props.data.layers.map(reactifySvgSymbolElement.bind(null, props))}\r\n      {props.showSpecs && d.specs && <SvgSymbolSpecs specs={d.specs} />}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const VocabularyPage: React.FC<{}> = () => {\r\n  const [stroke, setStroke] = useState(\"#000000\");\r\n  const [fill, setFill] = useState(\"#ffffff\");\r\n  const [showSpecs, setShowSpecs] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <h1>Mystic Symbolic Vocabulary</h1>\r\n      <p>\r\n        <label htmlFor=\"stroke\">Stroke: </label>\r\n        <input\r\n          type=\"color\"\r\n          value={stroke}\r\n          onChange={(e) => setStroke(e.target.value)}\r\n          id=\"stroke\"\r\n        />{\" \"}\r\n        <label htmlFor=\"fill\">Fill: </label>\r\n        <input\r\n          type=\"color\"\r\n          value={fill}\r\n          onChange={(e) => setFill(e.target.value)}\r\n          id=\"fill\"\r\n        />{\" \"}\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showSpecs}\r\n            onChange={(e) => setShowSpecs(e.target.checked)}\r\n          />{\" \"}\r\n          Show specs\r\n        </label>\r\n      </p>\r\n      {SvgVocabulary.map((symbolData) => (\r\n        <div\r\n          key={symbolData.name}\r\n          style={{\r\n            display: \"inline-block\",\r\n            border: \"1px solid black\",\r\n            margin: \"4px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundColor: \"black\",\r\n              color: \"white\",\r\n              padding: \"4px\",\r\n            }}\r\n          >\r\n            {symbolData.name}\r\n          </div>\r\n          <div className=\"checkerboard-bg\" style={{ lineHeight: 0 }}>\r\n            <SvgSymbol\r\n              data={symbolData}\r\n              scale={0.25}\r\n              stroke={stroke}\r\n              fill={fill}\r\n              showSpecs={showSpecs}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WavesPage } from \"./pages/waves-page\";\nimport { VocabularyPage } from \"./pages/vocabulary-page\";\n\nconst Pages = {\n  vocabulary: VocabularyPage,\n  waves: WavesPage,\n};\n\ntype PageName = keyof typeof Pages;\n\nconst pageNames = Object.keys(Pages) as PageName[];\n\nconst APP_ID = \"app\";\n\nconst appEl = document.getElementById(APP_ID);\n\nif (!appEl) {\n  throw new Error(`Unable to find #${APP_ID}!`);\n}\n\nconst App: React.FC<{}> = (props) => {\n  const page = new URLSearchParams(window.location.search);\n  const currPageName = toPageName(page.get(\"p\") || \"\", \"vocabulary\");\n  const PageComponent = Pages[currPageName];\n\n  return (\n    <>\n      <main>\n        <PageComponent />\n      </main>\n      <footer>\n        <p>Other pages</p>\n        <ul>\n          {pageNames.map((pageName) => (\n            <li key={pageName}>\n              {currPageName === pageName ? (\n                pageName\n              ) : (\n                <a href={`?p=${encodeURIComponent(pageName)}`}>{pageName}</a>\n              )}\n            </li>\n          ))}\n        </ul>\n      </footer>\n    </>\n  );\n};\n\nReactDOM.render(<App />, appEl);\n\nfunction isPageName(page: string): page is PageName {\n  return pageNames.includes(page as any);\n}\n\nfunction toPageName(page: string, defaultValue: PageName): PageName {\n  if (isPageName(page)) return page;\n  return defaultValue;\n}\n"]}